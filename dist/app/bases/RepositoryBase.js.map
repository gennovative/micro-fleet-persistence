{"version":3,"sources":["app/bases/RepositoryBase.ts"],"names":[],"mappings":"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","file":"RepositoryBase.js","sourcesContent":["const every = require('lodash/every');\r\nconst isEmpty = require('lodash/isEmpty');\r\nimport * as moment from 'moment';\r\nimport { injectable, Guard, MinorException } from 'back-lib-common-util';\r\nimport { PagedArray, IRepository, AtomicSession } from 'back-lib-common-contracts';\r\n\r\nimport { IDatabaseConnector, QueryCallback } from '../connector/IDatabaseConnector';\r\nimport { EntityBase } from './EntityBase';\r\n\r\n\r\n@injectable()\r\nexport abstract class RepositoryBase<TEntity extends EntityBase, TModel extends IModelDTO>\r\n\timplements IRepository<TModel> {\r\n\r\n\tpublic isSoftDeletable: boolean;\r\n\tpublic isAuditable: boolean;\r\n\r\n\tconstructor(\r\n\t\tprotected _dbConnector: IDatabaseConnector\r\n\t) {\r\n\t\tthis.isSoftDeletable = true;\r\n\t\tthis.isAuditable = true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets current date time in UTC.\r\n\t */\r\n\tprotected get utcNow(): moment.Moment {\r\n\t\treturn moment(new Date()).utc();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.countAll\r\n\t */\r\n\tpublic async countAll(atomicSession?: AtomicSession): Promise<number> {\r\n\t\tlet result = await this.executeQuery(query => {\r\n\t\t\t\treturn query.count('id as total');\r\n\t\t\t}, atomicSession);\r\n\r\n\t\t// In case with Postgres, `count` returns a bigint type which will be a String \r\n\t\t// and not a Number.\r\n\t\t/* istanbul ignore next */\r\n\t\treturn (isEmpty(result) ? 0 : +(result[0]['total']));\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.create\r\n\t */\r\n\tpublic async create(model: TModel, atomicSession?: AtomicSession): Promise<TModel> {\r\n\t\tlet entity = this.toEntity(model, false),\r\n\t\t\tnewEnt: TEntity;\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (this.isAuditable) {\r\n\t\t\tlet now = this.utcNow;\r\n\t\t\tmodel['createdAt'] = model['updatedAt'] = now.toDate();\r\n\t\t\tentity['createdAt'] = entity['updatedAt'] = now.format();\r\n\t\t}\r\n\r\n\t\tnewEnt = await this.executeCommand(query => {\r\n\t\t\treturn query.insert(entity);\r\n\t\t}, atomicSession);\r\n\r\n\t\tlet newDto = this.toDTO(newEnt, false);\r\n\t\tnewDto['createdAt'] = newDto['updatedAt'] = model['createdAt'];\r\n\t\treturn newDto;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.delete\r\n\t */\r\n\tpublic async delete(id: BigSInt, atomicSession?: AtomicSession): Promise<number> {\r\n\t\tlet affectedRows: number;\r\n\r\n\t\tif (this.isSoftDeletable) {\r\n\t\t\taffectedRows = await this.patch(<any>{\r\n\t\t\t\tid,\r\n\t\t\t\tdeletedAt: this.utcNow.format()\r\n\t\t\t}, atomicSession);\r\n\t\t} else {\r\n\t\t\taffectedRows = await this.executeCommand(query => {\r\n\t\t\t\treturn query.deleteById(id);\r\n\t\t\t}, atomicSession);\r\n\t\t}\r\n\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.find\r\n\t */\r\n\tpublic async find(id: BigSInt, atomicSession?: AtomicSession): Promise<TModel> {\r\n\t\tlet foundEnt: TEntity = await this.executeQuery(query => {\r\n\t\t\t\treturn query.findById(id);\r\n\t\t\t}, atomicSession);\r\n\r\n\t\treturn this.toDTO(foundEnt, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.page\r\n\t */\r\n\tpublic async page(pageIndex: number, pageSize: number, atomicSession?: AtomicSession): Promise<PagedArray<TModel>> {\r\n\t\tlet foundList: { total: number, results: Array<TEntity> },\r\n\t\t\tdtoList: TModel[],\r\n\t\t\taffectedRows: number;\r\n\r\n\t\tfoundList = await this.executeQuery(query => {\r\n\t\t\treturn query.page(pageIndex, pageSize);\r\n\t\t}, atomicSession);\r\n\r\n\t\tif (!foundList || isEmpty(foundList.results)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tdtoList = this.toDTO(foundList.results, false);\r\n\t\treturn new PagedArray<TModel>(foundList.total, ...dtoList);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.patch\r\n\t */\r\n\tpublic async patch(model: Partial<TModel>, atomicSession?: AtomicSession): Promise<number> {\r\n\t\tGuard.assertArgDefined('model.id', model.id);\r\n\r\n\t\tlet entity = this.toEntity(model, true),\r\n\t\t\taffectedRows: number;\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (this.isAuditable) {\r\n\t\t\tlet modelAlias: any = model,\r\n\t\t\t\tnow = this.utcNow;\r\n\t\t\tmodelAlias['updatedAt'] = now.toDate();\r\n\t\t\tentity['createdAt'] = now.format();\r\n\t\t}\r\n\r\n\t\taffectedRows = await this.executeCommand(query => {\r\n\t\t\treturn query.where('id', entity.id).patch(entity);\r\n\t\t}, atomicSession);\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.update\r\n\t */\r\n\tpublic async update(model: TModel, atomicSession?: AtomicSession): Promise<number> {\r\n\t\tGuard.assertArgDefined('model.id', model.id);\r\n\r\n\t\tlet entity = this.toEntity(model, false),\r\n\t\t\taffectedRows: number;\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (this.isAuditable) {\r\n\t\t\tlet now = this.utcNow;\r\n\t\t\tmodel['updatedAt'] = now.toDate();\r\n\t\t\tentity['updatedAt'] = now.format();\r\n\t\t}\r\n\r\n\t\taffectedRows = await this.executeCommand(query => {\r\n\t\t\treturn query.where('id', entity.id).update(entity);\r\n\t\t}, atomicSession);\r\n\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\t/**\r\n\t * Executing an query that does something and doesn't expect return value.\r\n\t * This kind of query is executed on all added connections.\r\n\t * @return A promise that resolve to affected rows.\r\n\t * @throws {[errorMsg, affectedRows]} When not all connections have same affected rows.\r\n\t */\r\n\tprotected executeCommand(callback: QueryCallback<TEntity>, atomicSession: AtomicSession = null, ...names: string[]): Promise<any> {\r\n\t\tlet queryJobs = this.prepare(callback, atomicSession, ...names),\r\n\t\t\t// Create exception here to have full error stack\r\n\t\t\texception = new MinorException('Not successful on all connections');\r\n\r\n\t\tif (atomicSession) {\r\n\t\t\treturn <any>queryJobs[0];\r\n\t\t}\r\n\r\n\t\treturn <any>Promise.all(queryJobs)\r\n\t\t\t.then((affectedRows: number[]) => {\r\n\t\t\t\t// If there is no affected rows, or if not all connections have same affected rows.\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tif (isEmpty(affectedRows) || !every(affectedRows, r => r == affectedRows[0])) {\r\n\t\t\t\t\treturn <any>Promise.reject(exception);\r\n\t\t\t\t}\r\n\t\t\t\t// If all connections have same affected rows, it means the execution was successful.\r\n\t\t\t\treturn affectedRows[0];\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Executing an query that has returned value.\r\n\t * This kind of query is executed on the primary (first) connection.\r\n\t */\r\n\tprotected executeQuery(callback: QueryCallback<TEntity>, atomicSession?: AtomicSession, name: string = '0'): Promise<any> {\r\n\t\tlet queryJobs = this.prepare(callback, atomicSession, name);\r\n\t\t// Get value from first connection\r\n\t\treturn queryJobs[0];\r\n\t}\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.query\r\n\t */\r\n\tprotected abstract prepare(callback: QueryCallback<TEntity>, atomicSession?: AtomicSession, ...names: string[]): Promise<any>[];\r\n\tprotected abstract toEntity(from: TModel | TModel[] | Partial<TModel>, isPartial: boolean): TEntity & TEntity[];\r\n\tprotected abstract toDTO(from: TEntity | TEntity[] | Partial<TEntity>, isPartial: boolean): TModel & TModel[];\r\n}"]}