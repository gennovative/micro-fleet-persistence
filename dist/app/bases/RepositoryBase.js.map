{"version":3,"sources":["app/bases/RepositoryBase.ts"],"names":[],"mappings":"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","file":"RepositoryBase.js","sourcesContent":["const every = require('lodash/every');\r\nconst isEmpty = require('lodash/isEmpty');\r\nimport { QueryBuilder, QueryBuilderSingle } from 'objection';\r\nimport * as moment from 'moment';\r\nimport { injectable, unmanaged, Guard, MinorException } from '@micro-fleet/common-util';\r\nimport * as cc from '@micro-fleet/common-contracts';\r\n\r\nimport { AtomicSessionFactory } from '../atom/AtomicSessionFactory';\r\nimport { IDatabaseConnector, QueryCallback } from '../connector/IDatabaseConnector';\r\nimport { EntityBase } from './EntityBase';\r\nimport { MonoProcessor, ProcessorOptions } from './MonoProcessor';\r\nimport { BatchProcessor } from './BatchProcessor';\r\nimport { VersionControlledProcessor } from './VersionControlledProcessor';\r\n\r\nexport interface RepositoryBaseOptions<TEntity extends EntityBase, TModel extends IModelDTO, TPk extends PkType = BigInt, TUk = NameUk>\r\n\t\textends ProcessorOptions {\r\n\t/**\r\n\t * Used by default version-controlled processor and default batch processor.\r\n\t */\r\n\tmonoProcessor?: MonoProcessor<TEntity, TModel, TPk, TUk>;\r\n\t\r\n\t/**\r\n\t * Version-controlled processor\r\n\t */\r\n\tversionProcessor?: VersionControlledProcessor<TEntity, TModel, TPk, TUk>;\r\n\t\r\n\t/**\r\n\t * Providing this will ignore `monoProcessor` and `versionProcessor`.\r\n\t */\r\n\tbatchProcessor?: BatchProcessor<TEntity, TModel, TPk, TUk>;\r\n}\r\n\r\n\r\n@injectable()\r\nexport abstract class RepositoryBase<TEntity extends EntityBase, TModel extends IModelDTO, TPk extends PkType = BigInt, TUk = NameUk>\r\n\timplements cc.ISoftDelRepository<TModel, TPk, TUk> {\r\n\r\n\tprotected _processor: BatchProcessor<TEntity, TModel, TPk, TUk>;\r\n\r\n\tconstructor( @unmanaged() EntityClass, @unmanaged() dbConnector: IDatabaseConnector, @unmanaged() options: RepositoryBaseOptions<TEntity, TModel, TPk, TUk> = {}) {\r\n\t\tGuard.assertArgDefined('EntityClass', EntityClass);\r\n\t\tGuard.assertArgDefined('dbConnector', dbConnector);\r\n\t\tlet crud: any;\r\n\t\tif (options.isVersionControlled) {\r\n\t\t\t// TODO: Should let `VersionControlledProcessor` accepts `MonoProcessor` as argument.\r\n\t\t\tcrud = options.versionProcessor || new VersionControlledProcessor<TEntity, TModel, TPk, TUk>(EntityClass, dbConnector, options);\r\n\t\t} else {\r\n\t\t\tcrud = options.monoProcessor || new MonoProcessor<TEntity, TModel, TPk, TUk>(EntityClass, dbConnector, options);\r\n\t\t}\r\n\t\tthis._processor = options.batchProcessor || new BatchProcessor<TEntity, TModel, TPk, TUk>(crud, dbConnector);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IRepository.countAll\r\n\t */\r\n\tpublic async countAll(opts: cc.RepositoryCountAllOptions = {}): Promise<number> {\r\n\t\treturn this._processor.countAll(opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.create\r\n\t */\r\n\tpublic create(model: TModel | TModel[], opts: cc.RepositoryCreateOptions = {}): Promise<TModel & TModel[]> {\r\n\t\treturn this._processor.create(model, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see ISoftDelRepository.deleteSoft\r\n\t */\r\n\tpublic deleteSoft(pk: TPk | TPk[], opts: cc.RepositoryDeleteOptions = {}): Promise<number> {\r\n\t\treturn this._processor.deleteSoft(pk, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.deleteHard\r\n\t */\r\n\tpublic deleteHard(pk: TPk | TPk[], opts: cc.RepositoryDeleteOptions = {}): Promise<number> {\r\n\t\treturn this._processor.deleteHard(pk, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.exists\r\n\t */\r\n\tpublic async exists(props: TUk, opts: cc.RepositoryExistsOptions = {}): Promise<boolean> {\r\n\t\treturn this._processor.exists(props, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.findByPk\r\n\t */\r\n\tpublic findByPk(pk: TPk, opts: cc.RepositoryFindOptions = {}): Promise<TModel> {\r\n\t\treturn this._processor.findByPk(pk, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.page\r\n\t */\r\n\tpublic async page(pageIndex: number, pageSize: number, opts: cc.RepositoryPageOptions = {}): Promise<cc.PagedArray<TModel>> {\r\n\t\treturn this._processor.page(pageIndex, pageSize, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.patch\r\n\t */\r\n\tpublic patch(model: Partial<TModel> | Partial<TModel>[], opts: cc.RepositoryPatchOptions = {}): Promise<Partial<TModel> & Partial<TModel>[]> {\r\n\t\treturn this._processor.patch(model, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see ISoftDelRepository.recover\r\n\t */\r\n\tpublic async recover(pk: TPk | TPk[], opts: cc.RepositoryRecoverOptions = {}): Promise<number> {\r\n\t\treturn this._processor.recover(pk, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.update\r\n\t */\r\n\tpublic update(model: TModel | TModel[], opts: cc.RepositoryUpdateOptions = {}): Promise<TModel & TModel[]> {\r\n\t\treturn this._processor.update(model, opts);\r\n\t}\r\n}"]}