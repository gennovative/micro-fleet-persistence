{"version":3,"sources":["app/bases/RepositoryBase.ts"],"names":[],"mappings":"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","file":"RepositoryBase.js","sourcesContent":["const every = require('lodash/every');\r\nconst isEmpty = require('lodash/isEmpty');\r\nimport * as moment from 'moment';\r\nimport { injectable, Guard, MinorException } from 'back-lib-common-util';\r\nimport { PagedArray, IRepository, RepositoryOptions, AtomicSession } from 'back-lib-common-contracts';\r\n\r\nimport { AtomicSessionFactory } from '../atom/AtomicSessionFactory';\r\nimport { IDatabaseConnector, QueryCallback } from '../connector/IDatabaseConnector';\r\nimport { EntityBase } from './EntityBase';\r\n\r\n\r\n@injectable()\r\nexport abstract class RepositoryBase<TEntity extends EntityBase, TModel extends IModelDTO, TPk = BigSInt>\r\n\timplements IRepository<TModel, TPk> {\r\n\r\n\tpublic readonly isSoftDeletable: boolean;\r\n\tpublic readonly isAuditable: boolean;\r\n\r\n\tprivate _atomFac: AtomicSessionFactory;\r\n\tprivate _useCompositePk: boolean;\r\n\r\n\r\n\tconstructor(\r\n\t\tprotected _dbConnector: IDatabaseConnector\r\n\t) {\r\n\t\tGuard.assertArgDefined('_dbConnector', _dbConnector);\r\n\t\tthis.isSoftDeletable = true;\r\n\t\tthis.isAuditable = true;\r\n\t\tthis._atomFac = new AtomicSessionFactory(_dbConnector);\r\n\t\tthis._useCompositePk = this.idProp.length > 1;\r\n\t}\r\n\r\n\r\n\tpublic get useCompositePk(): boolean {\r\n\t\treturn this._useCompositePk;\r\n\t}\r\n\r\n\t/**\r\n\t * Gets current date time in UTC.\r\n\t */\r\n\tprotected get utcNow(): moment.Moment {\r\n\t\treturn moment(new Date()).utc();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.countAll\r\n\t */\r\n\tpublic async countAll(opts: RepositoryOptions = {}): Promise<number> {\r\n\t\tlet result = await this.executeQuery(query => {\r\n\t\t\t\tlet q = query.count('id as total');\r\n\t\t\t\treturn (this.useCompositePk) ? q.where('tenant_id', opts.tenantId) : q;\r\n\t\t\t}, opts.atomicSession);\r\n\r\n\t\t// In case with Postgres, `count` returns a bigint type which will be a String \r\n\t\t// and not a Number.\r\n\t\t/* istanbul ignore next */\r\n\t\treturn (isEmpty(result) ? 0 : +(result[0]['total']));\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.create\r\n\t */\r\n\tpublic create(model: TModel | TModel[], opts: RepositoryOptions = {}): Promise<TModel & TModel[]> {\r\n\t\tif (Array.isArray(model)) {\r\n\t\t\treturn this.execBatch(model, this.create, opts);\r\n\t\t}\r\n\r\n\t\tlet entity = this.toEntity(model, false),\r\n\t\t\tnow = this.utcNow;\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (this.isAuditable) {\r\n\t\t\tmodel['createdAt'] = model['updatedAt'] = now.toDate();\r\n\t\t\tentity['createdAt'] = entity['updatedAt'] = now.format();\r\n\t\t}\r\n\r\n\t\treturn this.executeCommand(query => query.insert(entity), opts.atomicSession)\r\n\t\t\t.then(() => <any>model);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.delete\r\n\t */\r\n\tpublic delete(pk: TPk | TPk[], opts: RepositoryOptions = {}): Promise<number> {\r\n\t\tlet delta: any,\r\n\t\t\tdeletedAt = this.utcNow.format();\r\n\t\tif (this.useCompositePk) {\r\n\t\t\tdelta = Object.assign(pk, { deletedAt });\r\n\t\t} else if (Array.isArray(pk)) {\r\n\t\t\tdelta = pk.map(k => ({\r\n\t\t\t\tid: k,\r\n\t\t\t\tdeletedAt\r\n\t\t\t}));\r\n\t\t} else {\r\n\t\t\tdelta = {\r\n\t\t\t\tid: pk,\r\n\t\t\t\tdeletedAt\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn this.patch(delta, opts)\r\n\t\t\t.then((r: Partial<TModel> | Partial<TModel>[]) => {\r\n\t\t\t\t// If totally failed\r\n\t\t\t\tif (!r) { return 0; }\r\n\r\n\t\t\t\t// For single item:\r\n\t\t\t\tif (!Array.isArray(r)) { return 1; }\r\n\r\n\t\t\t\t// For batch:\r\n\t\t\t\t// If batch succeeds entirely, expect \"r\" = [1, 1, 1, 1...]\r\n\t\t\t\t// If batch succeeds partially, expect \"r\" = [1, null, 1, null...]\r\n\t\t\t\treturn r.reduce((prev, curr) => curr ? prev + 1 : prev, 0);\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.deleteHard\r\n\t */\r\n\tpublic deleteHard(pk: TPk | TPk[], opts: RepositoryOptions = {}): Promise<number> {\r\n\t\tif (Array.isArray(pk)) {\r\n\t\t\treturn this.execBatch(pk, this.deleteHard, opts)\r\n\t\t\t\t.then((r: number[]) => {\r\n\t\t\t\t\t// If batch succeeds entirely, expect \"r\" = [1, 1, 1, 1...]\r\n\t\t\t\t\t// If batch succeeds partially, expect \"r\" = [1, null, 1, null...]\r\n\t\t\t\t\treturn r.reduce((prev, curr) => curr ? prev + 1 : prev, 0);\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn this.executeCommand(query => {\r\n\t\t\t\tlet q = query.deleteById(this.toArr(pk));\r\n\t\t\t\tconsole.log(`HARD DELETE (${pk}):`, q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t}, opts.atomicSession);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.findByPk\r\n\t */\r\n\tpublic findByPk(pk: TPk, opts: RepositoryOptions = {}): Promise<TModel> {\r\n\t\treturn this.executeQuery(query => {\r\n\t\t\t\tlet q = query.findById(this.toArr(pk));\r\n\t\t\t\tconsole.log(`findByPk (${pk}):`, q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t}, opts.atomicSession)\r\n\t\t\t.then(foundEnt => {\r\n\t\t\t\treturn foundEnt ? this.toDTO(foundEnt, false) : null;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.page\r\n\t */\r\n\tpublic async page(pageIndex: number, pageSize: number, opts: RepositoryOptions = {}): Promise<PagedArray<TModel>> {\r\n\t\tlet foundList: { total: number, results: Array<TEntity> },\r\n\t\t\tdtoList: TModel[],\r\n\t\t\taffectedRows: number;\r\n\r\n\t\tfoundList = await this.executeQuery(query => {\r\n\t\t\t\tlet q = query.page(pageIndex, pageSize);\r\n\t\t\t\treturn (this.useCompositePk) ? q.where('tenant_id', opts.tenantId) : q;\r\n\t\t\t}, opts.atomicSession);\r\n\r\n\t\tif (!foundList || isEmpty(foundList.results)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tdtoList = this.toDTO(foundList.results, false);\r\n\t\treturn new PagedArray<TModel>(foundList.total, ...dtoList);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.patch\r\n\t */\r\n\tpublic patch(model: Partial<TModel> | Partial<TModel>[], opts: RepositoryOptions = {}): Promise<Partial<TModel> & Partial<TModel>[]> {\r\n\t\tif (Array.isArray(model)) {\r\n\t\t\treturn this.execBatch(model, this.patch, opts);\r\n\t\t}\r\n\r\n\t\tlet entity = this.toEntity(model, true),\r\n\t\t\taffectedRows: number;\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (this.isAuditable) {\r\n\t\t\tlet modelAlias: any = model,\r\n\t\t\t\tnow = this.utcNow;\r\n\t\t\tmodelAlias['updatedAt'] = now.toDate();\r\n\t\t\tentity['createdAt'] = now.format();\r\n\t\t}\r\n\r\n\t\treturn this.executeCommand(query => {\r\n\t\t\t\tlet q = query.patch(entity);\r\n\t\t\t\tconsole.log('PATCH: (%s)', model, q.toSql());\r\n\t\t\t\treturn (this.useCompositePk)\r\n\t\t\t\t\t? q.whereComposite(this.idCol, '=', this.toArr(entity)) \r\n\t\t\t\t\t: q.where('id', entity.id);\r\n\t\t\t}, opts.atomicSession)\r\n\t\t\t\t// `query.patch` returns number of affected rows, but we want to return the updated model.\r\n\t\t\t.then(count => count ? <any>model : null);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.update\r\n\t */\r\n\tpublic update(model: TModel | TModel[], opts: RepositoryOptions = {}): Promise<TModel & TModel[]> {\r\n\t\tif (Array.isArray(model)) {\r\n\t\t\treturn this.execBatch(model, this.update, opts);\r\n\t\t}\r\n\r\n\t\tlet entity = this.toEntity(model, false),\r\n\t\t\taffectedRows: number;\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (this.isAuditable) {\r\n\t\t\tlet now = this.utcNow;\r\n\t\t\tmodel['updatedAt'] = now.toDate();\r\n\t\t\tentity['updatedAt'] = now.format();\r\n\t\t}\r\n\r\n\t\treturn this.executeCommand(query => {\r\n\t\t\t\tlet q = query.update(entity);\r\n\t\t\t\tconsole.log(`UPDATE: (${model})`, q.toSql());\r\n\t\t\t\treturn (this.useCompositePk)\r\n\t\t\t\t\t? q.whereComposite(this.idCol, '=', this.toArr(entity)) \r\n\t\t\t\t\t: q.where('id', entity.id);\r\n\t\t\t}, opts.atomicSession)\r\n\t\t\t\t// `query.update` returns number of affected rows, but we want to return the updated model.\r\n\t\t\t.then(count => count ? <any>model : null);\r\n\t}\r\n\r\n\t/**\r\n\t * Executing an query that does something and doesn't expect return value.\r\n\t * This kind of query is executed on all added connections.\r\n\t * @return A promise that resolve to affected rows.\r\n\t * @throws {[errorMsg, affectedRows]} When not all connections have same affected rows.\r\n\t */\r\n\tprotected executeCommand(callback: QueryCallback<TEntity>, atomicSession: AtomicSession = null, ...names: string[]): Promise<any> {\r\n\t\tlet queryJobs = this.prepare(callback, atomicSession, ...names),\r\n\t\t\t// Create exception here to have full error stack\r\n\t\t\texception = new MinorException('Not successful on all connections');\r\n\r\n\t\tif (atomicSession) {\r\n\t\t\treturn <any>queryJobs[0];\r\n\t\t}\r\n\r\n\t\treturn <any>Promise.all(queryJobs)\r\n\t\t\t.then((affectedRows: number[]) => {\r\n\t\t\t\t// If there is no affected rows, or if not all connections have same affected rows.\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tif (isEmpty(affectedRows) || !every(affectedRows, r => r == affectedRows[0])) {\r\n\t\t\t\t\treturn <any>Promise.reject(exception);\r\n\t\t\t\t}\r\n\t\t\t\t// If all connections have same affected rows, it means the execution was successful.\r\n\t\t\t\treturn affectedRows[0];\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Executing an query that has returned value.\r\n\t * This kind of query is executed on the primary (first) connection.\r\n\t */\r\n\tprotected executeQuery(callback: QueryCallback<TEntity>, atomicSession?: AtomicSession, name: string = '0'): Promise<any> {\r\n\t\tlet queryJobs = this.prepare(callback, atomicSession, name);\r\n\t\t// Get value from first connection\r\n\t\treturn queryJobs[0];\r\n\t}\r\n\r\n\t/**\r\n\t * Execute batch operation in transaction.\r\n\t */\r\n\tprotected execBatch(inputs: any[], func: (m: any, opts?: RepositoryOptions) => any, opts?: RepositoryOptions): Promise<any> {\r\n\t\t// Utilize the provided transaction\r\n\t\tif (opts.atomicSession) {\r\n\t\t\treturn Promise.all(\r\n\t\t\t\tinputs.map(ip => func.call(this, ip, { atomicSession: opts.atomicSession }))\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlet flow = this._atomFac.startSession();\r\n\t\tflow.pipe(s => Promise.all(\r\n\t\t\tinputs.map(ip => func.call(this, ip, { atomicSession: s }))\r\n\t\t));\r\n\t\treturn flow.closePipe();\r\n\t}\r\n\r\n\tprotected toArr(pk: TPk | TEntity | Partial<TEntity>): any[] {\r\n\t\t// if pk is BigSInt\r\n\t\tif (typeof pk === 'string') {\r\n\t\t\treturn [pk];\r\n\t\t}\r\n\t\treturn this.idProp.map(c => pk[c]);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets array of ID column(s) that make up a composite PK.\r\n\t */\r\n\tprotected abstract get idCol(): string[];\r\n\r\n\t/**\r\n\t * Gets array of ID property(ies) that make up a composite PK.\r\n\t */\r\n\tprotected abstract get idProp(): string[];\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.query\r\n\t */\r\n\tprotected abstract prepare(callback: QueryCallback<TEntity>, atomicSession?: AtomicSession, ...names: string[]): Promise<any>[];\r\n\tprotected abstract toEntity(from: TModel | TModel[] | Partial<TModel>, isPartial: boolean): TEntity & TEntity[];\r\n\tprotected abstract toDTO(from: TEntity | TEntity[] | Partial<TEntity>, isPartial: boolean): TModel & TModel[];\r\n}"]}