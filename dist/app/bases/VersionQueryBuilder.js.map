{"version":3,"sources":["app/bases/VersionQueryBuilder.ts"],"names":[],"mappings":";;AAOA;IAGC,YAAoB,YAAY;QAAZ,iBAAY,GAAZ,YAAY,CAAA;IAChC,CAAC;IAGM,aAAa,CAAC,SAAgC,EAAE,QAA+B,EAAE,IAAkC;QACzH,OAAO,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IAEM,eAAe,CAAC,EAAO,EAAE,SAAgC,EAAE,QAA+B;QAChG,OAAO,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;IACtE,CAAC;IAEM,WAAW,CAAC,KAAU,EAAE,SAAgC,EAAE,QAA+B,EAAE,IAAgC;QACjI,OAAO,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IAEM,SAAS,CAAC,EAAO,EAAE,SAAgC,EAAE,QAA+B,EAAE,OAAiC,EAAE;QAC/H,IAAI,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;QACpE,IAAI,IAAI,CAAC,OAAO,EAAE;YACjB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACrC;aAAM;YACN,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;SAC7B;QACD,OAAO,CAAC,CAAC;IACV,CAAC;IAEM,SAAS,CAAC,SAAiB,EAAE,QAAgB,EAAE,SAAgC,EAAE,QAA+B,EAAE,IAA8B;QACtJ,OAAO,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IAEM,UAAU,CAAC,MAAe,EAAE,SAAgC,EAAE,QAA+B,EAAE,IAA+B;QACpI,OAAY,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACzJ,CAAC;IAEM,gBAAgB,CAAC,EAAO,EAAE,QAAqC,EAAE,OAAoC;QAC3G,OAAO,QAAQ,CAAC;IACjB,CAAC;IAEM,WAAW,CAAC,MAAe,EAAE,SAAgC,EAAE,QAA+B,EAAE,IAA+B;QACrI,OAAY,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC1J,CAAC;IAGO,KAAK,CAAC,EAAoC,EAAE,GAAU;QAC7D,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;CACD;AAjDD,kDAiDC","file":"VersionQueryBuilder.js","sourcesContent":["import { QueryBuilder, QueryBuilderSingle } from 'objection';\r\nimport * as cc from '@micro-fleet/common-contracts';\r\n\r\nimport { IQueryBuilder } from './IQueryBuilder';\r\nimport { EntityBase } from './EntityBase';\r\n\r\n\r\nexport class VersionQueryBuilder<TEntity extends EntityBase, TModel extends IModelDTO, TPk extends PkType, TUk = NameUk> \r\n\timplements IQueryBuilder<TEntity, TModel, TPk, TUk> {\r\n\r\n\tconstructor(private _EntityClass) {\r\n\t}\r\n\r\n\r\n\tpublic buildCountAll(prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryCountAllOptions): QueryBuilder<TEntity> {\r\n\t\treturn prevQuery.where('is_main', true);\r\n\t}\r\n\r\n\tpublic buildDeleteHard(pk: TPk, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>): QueryBuilderSingle<number> {\r\n\t\treturn rawQuery.deleteById(this.toArr(pk, this._EntityClass.idProp));\r\n\t}\r\n\r\n\tpublic buildExists(props: TUk, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryExistsOptions): QueryBuilder<TEntity> {\r\n\t\treturn prevQuery.where('is_main', true);\r\n\t}\r\n\r\n\tpublic buildFind(pk: TPk, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryFindOptions = {}): QueryBuilder<TEntity> {\r\n\t\tlet q = rawQuery.findById(this.toArr(pk, this._EntityClass.idProp));\r\n\t\tif (opts.version) {\r\n\t\t\tq = q.where('version', opts.version);\r\n\t\t} else {\r\n\t\t\tq = q.where('is_main', true);\r\n\t\t}\r\n\t\treturn q;\r\n\t}\r\n\r\n\tpublic buildPage(pageIndex: number, pageSize: number, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryPageOptions): QueryBuilder<TEntity> {\r\n\t\treturn prevQuery.where('is_main', true);\r\n\t}\r\n\r\n\tpublic buildPatch(entity: TEntity, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryPatchOptions): QueryBuilder<number> {\r\n\t\treturn <any>rawQuery.patch(entity).whereComposite(this._EntityClass.idColumn, '=', this.toArr(entity, this._EntityClass.idProp)).where('is_main', true);\r\n\t}\r\n\r\n\tpublic buildRecoverOpts(pk: TPk, prevOpts: cc.RepositoryRecoverOptions, rawOpts: cc.RepositoryRecoverOptions): cc.RepositoryExistsOptions {\r\n\t\treturn prevOpts;\r\n\t}\r\n\r\n\tpublic buildUpdate(entity: TEntity, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryPatchOptions): QueryBuilder<number> {\r\n\t\treturn <any>rawQuery.update(entity).whereComposite(this._EntityClass.idColumn, '=', this.toArr(entity, this._EntityClass.idProp)).where('is_main', true);\r\n\t}\r\n\r\n\r\n\tprivate toArr(pk: TPk | TEntity | Partial<TEntity>, arr: any[]): any[] {\r\n\t\treturn arr.map(c => pk[c]);\r\n\t}\r\n}"]}