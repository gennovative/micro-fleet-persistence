{"version":3,"sources":["app/bases/MonoQueryBuilder.ts"],"names":[],"mappings":"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","file":"MonoQueryBuilder.js","sourcesContent":["import { QueryBuilder, QueryBuilderSingle } from 'objection';\r\nimport * as cc from '@micro-fleet/common-contracts';\r\n\r\nimport { IQueryBuilder } from './IQueryBuilder';\r\nimport { EntityBase } from './EntityBase';\r\n\r\n\r\nexport class MonoQueryBuilder<TEntity extends EntityBase, TModel extends IModelDTO, TUk = NameUk> \r\n\timplements IQueryBuilder<TEntity, TModel, BigInt, TUk> {\r\n\r\n\tconstructor(private _EntityClass) {\r\n\t}\r\n\r\n\r\n\tpublic buildCountAll(prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryCountAllOptions): QueryBuilder<TEntity> {\r\n\t\tlet q = rawQuery.count('id as total');\r\n\t\treturn (opts.includeDeleted) ? q : q.whereNull('deleted_at');\r\n\t}\r\n\r\n\tpublic buildDeleteHard(pk: BigInt, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>): QueryBuilderSingle<number> {\r\n\t\treturn rawQuery.deleteById(<any>pk);\r\n\t}\r\n\r\n\tpublic buildExists(uniqVals: any[], prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryExistsOptions): QueryBuilder<TEntity> {\r\n\t\tlet q = rawQuery.count('id as total');\r\n\t\t\t// .whereComposite(this._EntityClass.uniqColumn, '=', this.toArr(uniqVals, this._EntityClass.uniqColumn));\r\n\t\tif (uniqVals && uniqVals.length) {\r\n\t\t\tq = q.where(builder => {\r\n\t\t\t\tthis._EntityClass.uniqColumn.forEach((c, i) => {\r\n\t\t\t\t\tlet v = uniqVals[i];\r\n\t\t\t\t\tif (v === null) {\r\n\t\t\t\t\t\tbuilder.orWhereNull(c);\r\n\t\t\t\t\t} else if (v !== undefined) {\r\n\t\t\t\t\t\tbuilder.orWhere(c, '=', v);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn (opts.includeDeleted) ? q : q.whereNull('deleted_at');\r\n\t}\r\n\r\n\tpublic buildFind(pk: BigInt, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryFindOptions = {}): QueryBuilder<TEntity> {\r\n\t\treturn <any>rawQuery.findById(<any>pk);\r\n\t}\r\n\r\n\tpublic buildPage(pageIndex: number, pageSize: number, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryPageOptions): QueryBuilder<TEntity> {\r\n\t\tlet q = rawQuery.page(pageIndex, pageSize);\r\n\t\tif (opts.sortBy) {\r\n\t\t\tlet direction = opts.sortType || 'asc';\r\n\t\t\tq = q.orderBy(opts.sortBy, direction);\r\n\t\t}\r\n\t\treturn (opts.includeDeleted) ? q : q.whereNull('deleted_at');\r\n\t}\r\n\r\n\tpublic buildPatch(entity: TEntity, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryPatchOptions): QueryBuilder<number> {\r\n\t\treturn rawQuery.patch(entity).where('id', entity['id']);\r\n\t}\r\n\r\n\tpublic buildRecoverOpts(pk: BigInt, prevOpts: cc.RepositoryRecoverOptions, rawOpts: cc.RepositoryRecoverOptions): cc.RepositoryExistsOptions {\r\n\t\treturn {\r\n\t\t\tincludeDeleted: true,\r\n\t\t};\r\n\t}\r\n\r\n\tpublic buildUpdate(entity: TEntity, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryPatchOptions): QueryBuilder<number> {\r\n\t\treturn rawQuery.update(entity).where('id', entity['id']);\r\n\t}\r\n\r\n}"]}