{"version":3,"sources":["app/bases/BatchProcessor.ts"],"names":[],"mappings":"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","file":"BatchProcessor.js","sourcesContent":["const every = require('lodash/every');\r\nconst isEmpty = require('lodash/isEmpty');\r\nimport { QueryBuilder, QueryBuilderSingle } from 'objection';\r\nimport * as moment from 'moment';\r\nimport { injectable, Guard, MinorException } from 'back-lib-common-util';\r\nimport * as cc from 'back-lib-common-contracts';\r\n\r\nimport { AtomicSessionFactory } from '../atom/AtomicSessionFactory';\r\nimport { IDatabaseConnector, QueryCallback } from '../connector/IDatabaseConnector';\r\nimport { EntityBase } from './EntityBase';\r\nimport { MonoProcessor } from './MonoProcessor';\r\n\r\n\r\nexport class BatchProcessor<TEntity extends EntityBase, TModel extends IModelDTO, TPk extends PkType = BigSInt, TUk = NameUk> {\r\n\r\n\t/**\r\n\t * Gets array of non-primary unique property(ies).\r\n\t */\r\n\tpublic ukCol: string[];\r\n\r\n\tprivate _atomFac: AtomicSessionFactory;\r\n\r\n\r\n\tconstructor(\r\n\t\tprotected _mono: MonoProcessor<TEntity, TModel, TPk, TUk>,\r\n\t\tdbConnector: IDatabaseConnector\r\n\t) {\r\n\t\tthis._atomFac = new AtomicSessionFactory(dbConnector);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IRepository.countAll\r\n\t */\r\n\tpublic countAll(opts: cc.RepositoryCountAllOptions = {}): Promise<number> {\r\n\t\treturn this._mono.countAll(opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.create\r\n\t */\r\n\tpublic create(model: TModel | TModel[], opts: cc.RepositoryCreateOptions = {}): Promise<TModel & TModel[]> {\r\n\t\tif (Array.isArray(model)) {\r\n\t\t\treturn this.execBatch(model, this.create, opts);\r\n\t\t}\r\n\r\n\t\treturn this._mono.create(model, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see ISoftDelRepository.deleteSoft\r\n\t */\r\n\tpublic deleteSoft(pk: TPk | TPk[], opts: cc.RepositoryDeleteOptions = {}): Promise<number> {\r\n\t\tif (Array.isArray(pk)) {\r\n\t\t\treturn this.execBatch(pk, this.deleteSoft, opts)\r\n\t\t\t\t.then((r: number[]) => {\r\n\t\t\t\t\t// If batch succeeds entirely, expect \"r\" = [1, 1, 1, 1...]\r\n\t\t\t\t\t// If batch succeeds partially, expect \"r\" = [1, null, 1, null...]\r\n\t\t\t\t\treturn r.reduce((prev, curr) => curr ? prev + 1 : prev, 0);\r\n\t\t\t\t});\r\n\t\t}\r\n\t\treturn this._mono.deleteSoft(pk, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.deleteHard\r\n\t */\r\n\tpublic deleteHard(pk: TPk | TPk[], opts: cc.RepositoryDeleteOptions = {}): Promise<number> {\r\n\t\tif (Array.isArray(pk)) {\r\n\t\t\treturn this.execBatch(pk, this.deleteHard, opts)\r\n\t\t\t\t.then((r: number[]) => {\r\n\t\t\t\t\t// If batch succeeds entirely, expect \"r\" = [1, 1, 1, 1...]\r\n\t\t\t\t\t// If batch succeeds partially, expect \"r\" = [1, null, 1, null...]\r\n\t\t\t\t\treturn r.reduce((prev, curr) => curr ? prev + 1 : prev, 0);\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn this._mono.deleteHard(pk, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.exists\r\n\t */\r\n\tpublic exists(props: TUk, opts: cc.RepositoryExistsOptions = {}): Promise<boolean> {\r\n\t\treturn this._mono.exists(props, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.findByPk\r\n\t */\r\n\tpublic findByPk(pk: TPk, opts: cc.RepositoryFindOptions = {}): Promise<TModel> {\r\n\t\treturn this._mono.findByPk(pk, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.page\r\n\t */\r\n\tpublic page(pageIndex: number, pageSize: number, opts: cc.RepositoryPageOptions = {}): Promise<cc.PagedArray<TModel>> {\r\n\t\treturn this._mono.page(pageIndex, pageSize, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.patch\r\n\t */\r\n\tpublic patch(model: Partial<TModel> | Partial<TModel>[], opts: cc.RepositoryPatchOptions = {}): Promise<Partial<TModel> & Partial<TModel>[]> {\r\n\t\tif (Array.isArray(model)) {\r\n\t\t\treturn this.execBatch(model, this.patch, opts);\r\n\t\t}\r\n\t\treturn this._mono.patch(model, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see ISoftDelRepository.recover\r\n\t */\r\n\tpublic recover(pk: TPk | TPk[], opts: cc.RepositoryRecoverOptions = {}): Promise<number> {\r\n\t\tif (Array.isArray(pk)) {\r\n\t\t\treturn this.execBatch(pk, this.recover, opts)\r\n\t\t\t\t.then((r: number[]) => {\r\n\t\t\t\t\treturn r.reduce((prev, curr) => curr ? prev + 1 : prev, 0);\r\n\t\t\t\t});\r\n\t\t}\r\n\t\treturn this._mono.recover(pk, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.update\r\n\t */\r\n\tpublic update(model: TModel | TModel[], opts: cc.RepositoryUpdateOptions = {}): Promise<TModel & TModel[]> {\r\n\t\tif (Array.isArray(model)) {\r\n\t\t\treturn this.execBatch(model, this.update, opts);\r\n\t\t}\r\n\t\treturn <any>this._mono.update(model, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see MonoProcessor.executeCommand\r\n\t */\r\n\tpublic executeCommand(callback: QueryCallback<TEntity>, atomicSession: cc.AtomicSession = null, ...names: string[]): Promise<any> {\r\n\t\treturn this._mono.executeCommand.apply(this._mono, arguments);\r\n\t}\r\n\r\n\t/**\r\n\t * @see MonoProcessor.executeQuery\r\n\t */\r\n\tpublic executeQuery(callback: QueryCallback<TEntity>, atomicSession?: cc.AtomicSession, name: string = '0'): Promise<any> {\r\n\t\treturn this._mono.executeQuery.apply(this._mono, arguments);\r\n\t}\r\n\r\n\t/**\r\n\t * Executes batch operation in transaction.\r\n\t */\r\n\tpublic execBatch(inputs: any[], func: (m: any, opts?: cc.RepositoryOptions) => any, opts?: cc.RepositoryOptions): Promise<any> {\r\n\t\t// Utilize the provided transaction\r\n\t\tif (opts.atomicSession) {\r\n\t\t\treturn Promise.all(\r\n\t\t\t\tinputs.map(ip => func.call(this, ip, { atomicSession: opts.atomicSession }))\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlet flow = this._atomFac.startSession();\r\n\t\tflow.pipe(s => Promise.all(\r\n\t\t\tinputs.map(ip => func.call(this, ip, { atomicSession: s }))\r\n\t\t));\r\n\t\treturn flow.closePipe();\r\n\t}\r\n\r\n\t/**\r\n\t * @see MonoProcessor.toEntity\r\n\t */\r\n\tpublic toEntity(from: TModel | TModel[] | Partial<TModel>, isPartial: boolean): TEntity & TEntity[] {\r\n\t\treturn this._mono.toEntity.apply(this._mono, arguments);\r\n\t}\r\n\r\n\t/**\r\n\t * @see MonoProcessor.toDTO\r\n\t */\r\n\tpublic toDTO(from: TEntity | TEntity[] | Partial<TEntity>, isPartial: boolean): TModel & TModel[] {\r\n\t\treturn this._mono.toDTO.apply(this._mono, arguments);\r\n\t}\r\n\r\n\t/**\r\n\t * Maps from an array of columns to array of values.\r\n\t * @param pk Object to get values from\r\n\t * @param cols Array of column names\r\n\t */\r\n\tpublic toArr(pk: TPk | TEntity | Partial<TEntity>, cols: string[]): any[] {\r\n\t\treturn this._mono.toArr.apply(this._mono, arguments);\r\n\t}\r\n}"]}