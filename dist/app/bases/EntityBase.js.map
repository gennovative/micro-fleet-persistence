{"version":3,"sources":["app/bases/EntityBase.ts"],"names":[],"mappings":";;AAAA,yCAAkC;AAClC,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1C,MAAM,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AACtC,MAAM,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AAGtC,gBAAiC,SAAQ,iBAAK;IAA9C;;QA0BQ,OAAE,GAAY,SAAS,CAAC;IA6BhC,CAAC;IArDA;;OAEG;IACI,MAAM,KAAK,SAAS;QAC1B,MAAM,mDAAmD,CAAC;IAC3D,CAAC;IAqBD;;OAEG;IACI,mBAAmB,CAAC,IAAI;QAC9B,IAAI,GAAG,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAEvC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,GAAG;YAC/B,gEAAgE;YAChE,wBAAwB;YACxB,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,GAAG,CAAC;YACZ,CAAC;YACD,MAAM,CAAC,SAAS,CAAM,GAAG,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,kBAAkB,CAAC,IAAI;QAC7B,IAAI,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,GAAG;YAC/B,wCAAwC;YACxC,MAAM,CAAC,SAAS,CAAM,GAAG,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;;AA7CD;;GAEG;AACoB,mBAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;AAEzC;;GAEG;AACoB,qBAAU,GAAG,EAAE,CAAC;AAEvC;;;GAGG;AACoB,iBAAM,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAS,SAAS,CAAC,CAAC;AAvB5E,gCAuDC;AAED,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC","file":"EntityBase.js","sourcesContent":["import { Model } from 'objection';\r\nconst mapKeys = require('lodash/mapKeys');\r\nconst snakeCase = global['snakeCase'];\r\nconst camelCase = global['camelCase'];\r\n\r\n\r\nexport abstract class EntityBase extends Model {\r\n\r\n\t/**\r\n\t * @abstract\r\n\t */\r\n\tpublic static get tableName(): string {\r\n\t\tthrow 'This method must be implemented by derived class!';\r\n\t}\r\n\r\n\t/**\r\n\t * [ObjectionJS] Array of primary column names.\r\n\t */\r\n\tpublic static readonly idColumn = ['id'];\r\n\r\n\t/**\r\n\t * An array of non-primary unique column names.\r\n\t */\r\n\tpublic static readonly uniqColumn = [];\r\n\r\n\t/**\r\n\t * Same with `idColumn`, but transform snakeCase to camelCase.\r\n\t * Should be overiden (['id', 'tenantId']) for composite PK.\r\n\t */\r\n\tpublic static readonly idProp = EntityBase.idColumn.map<string>(camelCase);\r\n\r\n\r\n\tpublic id: BigSInt = undefined;\r\n\r\n\t/**\r\n\t * This is called when an object is serialized to database format.\r\n\t */\r\n\tpublic $formatDatabaseJson(json) {\r\n\t\tjson = super.$formatDatabaseJson(json);\r\n\r\n\t\treturn mapKeys(json, (value, key) => {\r\n\t\t\t// Maps from \"camelCase\" to \"snake_case\" except special keyword.\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (key.indexOf('#') == 0) {\r\n\t\t\t\treturn key;\r\n\t\t\t}\r\n\t\t\treturn snakeCase(<any>key);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * This is called when an object is read from database.\r\n\t */\r\n\tpublic $parseDatabaseJson(json) {\r\n\t\tjson = mapKeys(json, (value, key) => {\r\n\t\t\t// Maps from \"snake_case\" to \"camelCase\"\r\n\t\t\treturn camelCase(<any>key);\r\n\t\t});\r\n\r\n\t\treturn super.$parseDatabaseJson(json);\r\n\t}\r\n}\r\n\r\nEntityBase.knex(null);"]}