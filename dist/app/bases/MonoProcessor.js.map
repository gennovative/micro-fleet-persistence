{"version":3,"sources":["app/bases/MonoProcessor.ts"],"names":[],"mappings":"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","file":"MonoProcessor.js","sourcesContent":["const every = require('lodash/every');\r\nconst isEmpty = require('lodash/isEmpty');\r\nimport { QueryBuilder, QueryBuilderSingle } from 'objection';\r\nimport * as moment from 'moment';\r\nimport { MinorException } from 'back-lib-common-util';\r\nimport * as cc from 'back-lib-common-contracts';\r\n\r\nimport { AtomicSessionFactory } from '../atom/AtomicSessionFactory';\r\nimport { IDatabaseConnector, QueryCallback } from '../connector/IDatabaseConnector';\r\nimport { IQueryBuilder } from './IQueryBuilder';\r\nimport { MonoQueryBuilder } from './MonoQueryBuilder';\r\nimport { TenantQueryBuilder } from './TenantQueryBuilder';\r\nimport { EntityBase } from './EntityBase';\r\n\r\n\r\nexport interface ProcessorOptions {\r\n\tisMultiTenancy?: boolean;\r\n\tisVersionControlled?: boolean;\r\n\r\n\t/**\r\n\t * Property names that triggers new version creation.\r\n\t */\r\n\ttriggerProps?: string[];\r\n}\r\n\r\nexport class MonoProcessor<TEntity extends EntityBase, TModel extends IModelDTO, TPk extends PkType = BigSInt, TUk = NameUk> {\r\n\r\n\t/**\r\n\t * Gets array of non-primary unique property(ies).\r\n\t */\r\n\tpublic get ukCol(): string[] {\r\n\t\treturn this._EntityClass.uniqColumn;\r\n\t}\r\n\r\n\tprotected _queryBuilders: IQueryBuilder<TEntity, TModel, PkType, TUk>[];\r\n\r\n\tconstructor(\r\n\t\tprotected _EntityClass,\r\n\t\tprotected _dbConnector: IDatabaseConnector,\r\n\t\tprotected _options: ProcessorOptions = {}\r\n\t) {\r\n\t\tthis._queryBuilders = [new MonoQueryBuilder<TEntity, TModel, TUk>(_EntityClass)];\r\n\t\tif (_options.isMultiTenancy) {\r\n\t\t\tthis._queryBuilders.push(new TenantQueryBuilder<TEntity, TModel, TUk>(_EntityClass));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets current date time in UTC.\r\n\t */\r\n\tpublic get utcNow(): moment.Moment {\r\n\t\treturn moment(new Date()).utc();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IRepository.countAll\r\n\t */\r\n\tpublic async countAll(opts: cc.RepositoryCountAllOptions = {}): Promise<number> {\r\n\t\tlet result = await this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildCountAll(query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<TEntity>>((prevQuery, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildCountAll(prevQuery, query.clone(), opts); \r\n\t\t\t\t}, null);\r\n\t\t\t\tconsole.log('COUNT ALL:', q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession\r\n\t\t);\r\n\r\n\t\t// In case with Postgres, `count` returns a bigint type which will be a String \r\n\t\t// and not a Number.\r\n\t\treturn +(result[0]['total']);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.create\r\n\t */\r\n\tpublic create(model: TModel, opts: cc.RepositoryCreateOptions = {}): Promise<TModel & TModel[]> {\r\n\t\tif (model.hasOwnProperty('createdAt')) {\r\n\t\t\tmodel['createdAt'] = model['updatedAt'] = this.utcNow.toDate();\r\n\t\t}\r\n\t\tlet entity = this.toEntity(model, false);\r\n\r\n\t\treturn this.executeCommand(query => query.insert(entity), opts.atomicSession)\r\n\t\t\t.then(() => <any>model);\r\n\t}\r\n\r\n\t/**\r\n\t * @see ISoftDelRepository.deleteSoft\r\n\t */\r\n\tpublic deleteSoft(pk: TPk, opts: cc.RepositoryDeleteOptions = {}): Promise<number> {\r\n\t\treturn this.setDeleteState(pk, true, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.deleteHard\r\n\t */\r\n\tpublic deleteHard(pk: TPk, opts: cc.RepositoryDeleteOptions = {}): Promise<number> {\r\n\t\treturn this.executeCommand(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildDeleteHard(pk, query);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilderSingle<number>>((prevQuery: any, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildDeleteHard(pk, prevQuery, query.clone());\r\n\t\t\t\t}, null);\r\n\t\t\t\tconsole.log('HARD DELETE (${pk}):', q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.exists\r\n\t */\r\n\tpublic async exists(props: TUk, opts: cc.RepositoryExistsOptions = {}): Promise<boolean> {\r\n\t\tlet result = await this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildExists(props, query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<TEntity>>((prevQuery, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildExists(this.toArr(props, this.ukCol), prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tconsole.log('EXIST: ', q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession\r\n\t\t);\r\n\r\n\t\treturn result[0]['total'] != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.findByPk\r\n\t */\r\n\tpublic findByPk(pk: TPk, opts: cc.RepositoryFindOptions = {}): Promise<TModel> {\r\n\t\treturn this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildFind(pk, query);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<TEntity>>((prevQuery, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildFind(pk, prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tconsole.log('FIND BY (%s):', pk, q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession)\r\n\t\t\t.then(foundEnt => {\r\n\t\t\t\treturn foundEnt ? this.toDTO(foundEnt, false) : null;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.page\r\n\t */\r\n\tpublic async page(pageIndex: number, pageSize: number, opts: cc.RepositoryPageOptions = {}): Promise<cc.PagedArray<TModel>> {\r\n\t\tlet foundList: { total: number, results: Array<TEntity> },\r\n\t\t\tdtoList: TModel[],\r\n\t\t\taffectedRows: number;\r\n\r\n\t\tfoundList = await this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildPage(pageIndex, pageSize, query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<TEntity>>((prevQuery, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildPage(pageIndex, pageSize, prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tconsole.log('PAGE:', q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession\r\n\t\t);\r\n\r\n\t\tif (!foundList || isEmpty(foundList.results)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tdtoList = this.toDTO(foundList.results, false);\r\n\t\treturn new cc.PagedArray<TModel>(foundList.total, ...dtoList);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.patch\r\n\t */\r\n\tpublic patch(model: Partial<TModel>, opts: cc.RepositoryPatchOptions = {}): Promise<Partial<TModel> & Partial<TModel>[]> {\r\n\t\tlet entity = this.toEntity(model, true);\r\n\r\n\t\t// We check property in \"entity\" because the \"model\" here is partial.\r\n\t\tif (entity.hasOwnProperty('updatedAt')) {\r\n\t\t\t(<any>model)['updatedAt'] = this.utcNow.toDate();\r\n\t\t\tentity['updatedAt'] = this.utcNow.format();\r\n\t\t}\r\n\r\n\t\treturn this.executeCommand(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildPatch(entity, query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<number>>((prevQuery: any, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildPatch(entity, prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tconsole.log('PATCH (%s):', entity, q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession)\r\n\t\t\t// `query.patch` returns number of affected rows, but we want to return the updated model.\r\n\t\t\t.then(count => count ? <any>model : null);\r\n\t}\r\n\r\n\t/**\r\n\t * @see ISoftDelRepository.recover\r\n\t */\r\n\tpublic async recover(pk: TPk, opts: cc.RepositoryRecoverOptions = {}): Promise<number> {\r\n\t\t// let options = this.buildRecoverOpts(pk, opts),\r\n\t\tlet options = this._queryBuilders.reduce<cc.RepositoryExistsOptions>((prevOpts: any, currBuilder) => {\r\n\t\t\treturn currBuilder.buildRecoverOpts(pk, prevOpts, opts);\r\n\t\t}, null);\r\n\r\n\t\t// Fetch the recovered record\r\n\t\tlet model = await this.findByPk(pk, options);\r\n\r\n\t\t// If record doesn't exist\r\n\t\tif (!model) { return 0; }\r\n\r\n\t\t// If another ACTIVE record with same unique keys exists\r\n\t\toptions.includeDeleted = false;\r\n\t\tif (await this.exists(<any>model, options)) {\r\n\t\t\tthrow new MinorException('DUPLICATE_UNIQUE_KEY');\r\n\t\t}\r\n\t\treturn this.setDeleteState(pk, false, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.update\r\n\t */\r\n\tpublic update(model: TModel, opts: cc.RepositoryUpdateOptions = {}): Promise<TModel> {\r\n\t\tif (model.hasOwnProperty('updatedAt')) {\r\n\t\t\tmodel['updatedAt'] = this.utcNow.toDate();\r\n\t\t}\r\n\t\tlet entity = this.toEntity(model, false),\r\n\t\t\taffectedRows: number;\r\n\r\n\r\n\t\treturn this.executeCommand(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildUpdate(entity, query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<number>>((prevQuery: any, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildUpdate(entity, prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tconsole.log('UPDATE (%s): ', entity, q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t}, opts.atomicSession)\r\n\t\t\t// `query.update` returns number of affected rows, but we want to return the updated model.\r\n\t\t\t.then(count => count ? <any>model : null);\r\n\t}\r\n\r\n\t/**\r\n\t * Executing an query that does something and doesn't expect return value.\r\n\t * This kind of query is executed on all added connections.\r\n\t * @return A promise that resolve to affected rows.\r\n\t * @throws {[errorMsg, affectedRows]} When not all connections have same affected rows.\r\n\t */\r\n\tpublic executeCommand(callback: QueryCallback<TEntity>, atomicSession: cc.AtomicSession = null, ...names: string[]): Promise<any> {\r\n\t\tlet queryJobs = this.prepare(callback, atomicSession, ...names),\r\n\t\t\t// Create exception here to have full error stack\r\n\t\t\texception = new MinorException('NOT_SUCCESSFUL_ON_ALL_CONNECTIONS');\r\n\r\n\t\tif (atomicSession) {\r\n\t\t\treturn <any>queryJobs[0];\r\n\t\t}\r\n\r\n\t\treturn <any>Promise.all(queryJobs)\r\n\t\t\t.then((affectedRows: number[]) => {\r\n\t\t\t\t// If there is no affected rows, or if not all connections have same affected rows.\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tif (isEmpty(affectedRows) || !every(affectedRows, r => r == affectedRows[0])) {\r\n\t\t\t\t\treturn <any>Promise.reject(exception);\r\n\t\t\t\t}\r\n\t\t\t\t// If all connections have same affected rows, it means the execution was successful.\r\n\t\t\t\treturn affectedRows[0];\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Executing an query that has returned value.\r\n\t * This kind of query is executed on the primary (first) connection.\r\n\t */\r\n\tpublic executeQuery(callback: QueryCallback<TEntity>, atomicSession?: cc.AtomicSession, name: string = '0'): Promise<any> {\r\n\t\tlet queryJobs = this.prepare(callback, atomicSession, name);\r\n\t\t// Get value from first connection\r\n\t\treturn queryJobs[0];\r\n\t}\r\n\r\n\t/**\r\n\t * Translates from DTO model(s) to entity model(s).\r\n\t */\r\n\tpublic toEntity(dto: TModel | TModel[] | Partial<TModel>, isPartial: boolean): TEntity & TEntity[] {\r\n\t\tif (!dto) { return null; }\r\n\r\n\t\tlet entity;\r\n\t\tif (isPartial) {\r\n\t\t\tentity = this._EntityClass.translator.partial(dto);\r\n\t\t}\r\n\t\tentity = this._EntityClass.translator.whole(dto);\r\n\r\n\t\tfor (let prop of ['createdAt', 'updatedAt', 'deletedAt']) {\r\n\t\t\tif (dto[prop]) {\r\n\t\t\t\tentity[prop] = moment.utc(dto[prop]).format();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn entity;\r\n\t}\r\n\r\n\t/**\r\n\t * Translates from entity model(s) to DTO model(s).\r\n\t */\r\n\tpublic toDTO(entity: TEntity | TEntity[] | Partial<TEntity>, isPartial: boolean): TModel & TModel[] {\r\n\t\tif (!entity) { return null; }\r\n\r\n\t\tlet dto;\r\n\t\tif (isPartial) {\r\n\t\t\tdto = this._EntityClass.translator.partial(entity, { enableValidation: false });\r\n\t\t}\r\n\t\t// Disable validation because it's unnecessary.\r\n\t\tdto = this._EntityClass.translator.whole(entity, { enableValidation: false });\r\n\r\n\t\tfor (let prop of ['createdAt', 'updatedAt', 'deletedAt']) {\r\n\t\t\tif (entity[prop]) {\r\n\t\t\t\tdto[prop] = moment.utc(entity[prop]).toDate();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn dto;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps from an array of columns to array of values.\r\n\t * @param pk Object to get values from\r\n\t * @param cols Array of column names\r\n\t */\r\n\tpublic toArr(pk: TPk | TEntity | Partial<TEntity>, cols: string[]): any[] {\r\n\t\treturn cols.map(c => pk[c]);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.query\r\n\t */\r\n\tprotected prepare(callback: QueryCallback<TEntity>, atomicSession?: cc.AtomicSession, ...names: string[]): Promise<any>[] {\r\n\t\treturn this._dbConnector.prepare(this._EntityClass, <any>callback, atomicSession, ...names);\r\n\t}\r\n\r\n\tprotected buildDeleteState(pk: TPk, isDel: boolean): any {\r\n\t\tlet delta: any,\r\n\t\t\tdeletedAt = (isDel ? this.utcNow.format() : null);\r\n\r\n\t\tif (this._options.isMultiTenancy) {\r\n\t\t\treturn Object.assign(pk, { deletedAt });\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tid: pk,\r\n\t\t\t\tdeletedAt\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setDeleteState(pk: TPk, isDel: boolean, opts: cc.RepositoryDeleteOptions = {}): Promise<number> {\r\n\t\tlet delta = this.buildDeleteState(pk, isDel);\r\n\r\n\t\treturn this.executeCommand(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildPatch(delta, query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<number>>((prevQuery: any, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildPatch(delta, prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tconsole.log('DEL STATE (%s):', isDel, q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession);\r\n\t}\r\n}"]}