{"version":3,"sources":["app/bases/MonoProcessor.ts"],"names":[],"mappings":";AAAA,+BAA+B;;;;;;;;;;AAE/B,MAAM,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACtC,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC1C,MAAM,KAAK,GAAoB,OAAO,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC;AAGjE,iCAAiC;AACjC,0DAA0D;AAC1D,oDAAoD;AAKpD,yDAAsD;AACtD,6DAA0D;AAc1D;IAWC,YACW,YAAY,EACZ,YAAgC,EAChC,WAA6B,EAAE;QAF/B,iBAAY,GAAZ,YAAY,CAAA;QACZ,iBAAY,GAAZ,YAAY,CAAoB;QAChC,aAAQ,GAAR,QAAQ,CAAuB;QAEzC,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,mCAAgB,CAAuB,YAAY,CAAC,CAAC,CAAC;QACjF,IAAI,QAAQ,CAAC,cAAc,EAAE;YAC5B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,uCAAkB,CAAuB,YAAY,CAAC,CAAC,CAAC;SACrF;IACF,CAAC;IAlBD;;OAEG;IACH,IAAW,KAAK;QACf,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;IACrC,CAAC;IAgBD;;OAEG;IACH,IAAW,MAAM;QAChB,OAAO,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;IACjC,CAAC;IAGD;;OAEG;IACU,QAAQ,CAAC,OAAqC,EAAE;;YAC5D,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CACnC,KAAK,CAAC,EAAE;gBACP,2CAA2C;gBAC3C,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAwB,CAAC,SAAS,EAAE,WAAW,EAAE,EAAE;oBACpF,OAAO,WAAW,CAAC,aAAa,CAAC,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;gBAClE,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;gBAClC,OAAO,CAAC,CAAC;YACV,CAAC,EACD,IAAI,CAAC,aAAa,CAClB,CAAC;YAEF,+EAA+E;YAC/E,oBAAoB;YACpB,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAC9B,CAAC;KAAA;IAED;;OAEG;IACI,MAAM,CAAC,KAAa,EAAE,OAAmC,EAAE;QACjE,IAAI,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;YACtC,KAAK,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;SAC/D;QACD,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAEzC,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC;aACzE,IAAI,CAAC,GAAG,EAAE,CAAM,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,UAAU,CAAC,EAAO,EAAE,OAAmC,EAAE;QAC/D,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,UAAU,CAAC,EAAO,EAAE,OAAmC,EAAE;QAC/D,OAAO,IAAI,CAAC,YAAY,CACvB,KAAK,CAAC,EAAE;YACP,2CAA2C;YAC3C,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAA6B,CAAC,SAAc,EAAE,WAAW,EAAE,EAAE;gBAC9F,OAAO,WAAW,CAAC,eAAe,CAAC,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;YAClE,CAAC,EAAE,IAAI,CAAC,CAAC;YACT,KAAK,CAAC,iBAAiB,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;YACpC,OAAO,CAAC,CAAC;QACV,CAAC,EACD,IAAI,CAAC,aAAa,CAClB,CAAC;IACH,CAAC;IAED;;OAEG;IACU,MAAM,CAAC,KAAU,EAAE,OAAmC,EAAE;;YACpE,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CACnC,KAAK,CAAC,EAAE;gBACP,gDAAgD;gBAChD,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAwB,CAAC,SAAS,EAAE,WAAW,EAAE,EAAE;oBACpF,OAAO,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;gBAC/F,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC9B,OAAO,CAAC,CAAC;YACV,CAAC,EACD,IAAI,CAAC,aAAa,CAClB,CAAC;YAEF,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;KAAA;IAED;;OAEG;IACI,QAAQ,CAAC,EAAO,EAAE,OAAiC,EAAE;QAC3D,OAAO,IAAI,CAAC,YAAY,CACvB,KAAK,CAAC,EAAE;YACP,qCAAqC;YACrC,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAwB,CAAC,SAAS,EAAE,WAAW,EAAE,EAAE;gBACpF,OAAO,WAAW,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;YAClE,CAAC,EAAE,IAAI,CAAC,CAAC;YACT,KAAK,CAAC,kBAAkB,EAAE,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;YACzC,OAAO,CAAC,CAAC;QACV,CAAC,EACD,IAAI,CAAC,aAAa,CAAC;aAClB,IAAI,CAAC,QAAQ,CAAC,EAAE;YAChB,OAAO,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACU,IAAI,CAAC,SAAiB,EAAE,QAAgB,EAAE,OAAiC,EAAE;;YACzF,IAAI,SAAqD,EACxD,OAAiB,EACjB,YAAoB,CAAC;YAEtB,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CAClC,KAAK,CAAC,EAAE;gBACP,4DAA4D;gBAC5D,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAwB,CAAC,SAAS,EAAE,WAAW,EAAE,EAAE;oBACpF,OAAO,WAAW,CAAC,SAAS,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;gBACnF,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC7B,OAAO,CAAC,CAAC;YACV,CAAC,EACD,IAAI,CAAC,aAAa,CAClB,CAAC;YAEF,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;gBAC7C,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC/C,OAAO,IAAI,EAAE,CAAC,UAAU,CAAS,SAAS,CAAC,KAAK,EAAE,GAAG,OAAO,CAAC,CAAC;QAC/D,CAAC;KAAA;IAED;;OAEG;IACI,KAAK,CAAC,KAAsB,EAAE,OAAkC,EAAE;QACxE,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAExC,qEAAqE;QACrE,IAAI,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;YACjC,KAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;SAC3C;QAED,OAAO,IAAI,CAAC,YAAY,CACvB,KAAK,CAAC,EAAE;YACP,gDAAgD;YAChD,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAuB,CAAC,SAAc,EAAE,WAAW,EAAE,EAAE;gBACxF,OAAO,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;YACvE,CAAC,EAAE,IAAI,CAAC,CAAC;YACT,KAAK,CAAC,gBAAgB,EAAE,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;YAC3C,OAAO,CAAC,CAAC;QACV,CAAC,EACD,IAAI,CAAC,aAAa,CAAC;YACnB,0FAA0F;aACzF,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAM,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACU,OAAO,CAAC,EAAO,EAAE,OAAoC,EAAE;;YACnE,iDAAiD;YACjD,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAA6B,CAAC,QAAa,EAAE,WAAW,EAAE,EAAE;gBACnG,OAAO,WAAW,CAAC,gBAAgB,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;YACzD,CAAC,EAAE,IAAI,CAAC,CAAC;YAET,6BAA6B;YAC7B,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAE7C,0BAA0B;YAC1B,IAAI,CAAC,KAAK,EAAE;gBAAE,OAAO,CAAC,CAAC;aAAE;YAEzB,wDAAwD;YACxD,OAAO,CAAC,cAAc,GAAG,KAAK,CAAC;YAC/B,IAAI,MAAM,IAAI,CAAC,MAAM,CAAM,KAAK,EAAE,OAAO,CAAC,EAAE;gBAC3C,MAAM,IAAI,4BAAc,CAAC,sBAAsB,CAAC,CAAC;aACjD;YACD,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC;KAAA;IAED;;OAEG;IACI,MAAM,CAAC,KAAa,EAAE,OAAmC,EAAE;QACjE,IAAI,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;YACtC,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;SAC1C;QACD,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,EACvC,YAAoB,CAAC;QAGtB,OAAO,IAAI,CAAC,YAAY,CACvB,KAAK,CAAC,EAAE;YACP,iDAAiD;YACjD,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAuB,CAAC,SAAc,EAAE,WAAW,EAAE,EAAE;gBACxF,OAAO,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;YACxE,CAAC,EAAE,IAAI,CAAC,CAAC;YACT,KAAK,CAAC,iBAAiB,EAAE,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;YAC5C,OAAO,CAAC,CAAC;QACV,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC;YACtB,2FAA2F;aAC1F,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAM,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,YAAY,CAAC,QAAgC,EAAE,aAAgC;QACrF,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;IAED;;OAEG;IACI,QAAQ,CAAC,GAAwC,EAAE,SAAkB;QAC3E,IAAI,CAAC,GAAG,EAAE;YAAE,OAAO,IAAI,CAAC;SAAE;QAE1B,IAAI,MAAM,CAAC;QACX,IAAI,SAAS,EAAE;YACd,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SACnD;QACD,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEjD,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,EAAE;YACzD,IAAI,GAAG,CAAC,IAAI,CAAC,EAAE;gBACd,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;aAC9C;SACD;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,MAA8C,EAAE,SAAkB;QAC9E,IAAI,CAAC,MAAM,EAAE;YAAE,OAAO,IAAI,CAAC;SAAE;QAE7B,IAAI,GAAG,CAAC;QACR,IAAI,SAAS,EAAE;YACd,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC,CAAC;SAChF;QACD,+CAA+C;QAC/C,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,gBAAgB,EAAE,KAAK,EAAE,CAAC,CAAC;QAE9E,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,EAAE;YACzD,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE;gBACjB,GAAG,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;aAC9C;SACD;QAED,OAAO,GAAG,CAAC;IACZ,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,EAAoC,EAAE,IAAc;QAChE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IAGD;;OAEG;IACO,OAAO,CAAC,QAAgC,EAAE,aAAgC;QACnF,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,EAAO,QAAQ,EAAE,aAAa,CAAC,CAAC;IACnF,CAAC;IAES,gBAAgB,CAAC,EAAO,EAAE,KAAc;QACjD,IAAI,KAAU,EACb,SAAS,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAEnD,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;YACjC,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;SACxC;aAAM;YACN,OAAO;gBACN,EAAE,EAAE,EAAE;gBACN,SAAS;aACT,CAAC;SACF;IACF,CAAC;IAES,cAAc,CAAC,EAAO,EAAE,KAAc,EAAE,OAAmC,EAAE;QACtF,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAE7C,OAAO,IAAI,CAAC,YAAY,CACvB,KAAK,CAAC,EAAE;YACP,+CAA+C;YAC/C,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAuB,CAAC,SAAc,EAAE,WAAW,EAAE,EAAE;gBACxF,OAAO,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,CAAC;YACtE,CAAC,EAAE,IAAI,CAAC,CAAC;YACT,KAAK,CAAC,oBAAoB,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;YAC9C,OAAO,CAAC,CAAC;QACV,CAAC,EACD,IAAI,CAAC,aAAa,CAAC,CAAC;IACtB,CAAC;CACD;AAlUD,sCAkUC","file":"MonoProcessor.js","sourcesContent":["/// <reference types=\"debug\" />\r\n\r\nconst every = require('lodash/every');\r\nconst isEmpty = require('lodash/isEmpty');\r\nconst debug: debug.IDebugger = require('debug')('MonoProcessor');\r\n\r\nimport { QueryBuilder, QueryBuilderSingle } from 'objection';\r\nimport * as moment from 'moment';\r\nimport { MinorException } from '@micro-fleet/common-util';\r\nimport * as cc from '@micro-fleet/common-contracts';\r\n\r\nimport { AtomicSessionFactory } from '../atom/AtomicSessionFactory';\r\nimport { IDatabaseConnector, QueryCallback } from '../connector/IDatabaseConnector';\r\nimport { IQueryBuilder } from './IQueryBuilder';\r\nimport { MonoQueryBuilder } from './MonoQueryBuilder';\r\nimport { TenantQueryBuilder } from './TenantQueryBuilder';\r\nimport { EntityBase } from './EntityBase';\r\n\r\n\r\nexport interface ProcessorOptions {\r\n\tisMultiTenancy?: boolean;\r\n\tisVersionControlled?: boolean;\r\n\r\n\t/**\r\n\t * Property names that triggers new version creation.\r\n\t */\r\n\ttriggerProps?: string[];\r\n}\r\n\r\nexport class MonoProcessor<TEntity extends EntityBase, TModel extends IModelDTO, TPk extends PkType = BigInt, TUk = NameUk> {\r\n\r\n\t/**\r\n\t * Gets array of non-primary unique property(ies).\r\n\t */\r\n\tpublic get ukCol(): string[] {\r\n\t\treturn this._EntityClass.uniqColumn;\r\n\t}\r\n\r\n\tprotected _queryBuilders: IQueryBuilder<TEntity, TModel, PkType, TUk>[];\r\n\r\n\tconstructor(\r\n\t\tprotected _EntityClass,\r\n\t\tprotected _dbConnector: IDatabaseConnector,\r\n\t\tprotected _options: ProcessorOptions = {}\r\n\t) {\r\n\t\tthis._queryBuilders = [new MonoQueryBuilder<TEntity, TModel, TUk>(_EntityClass)];\r\n\t\tif (_options.isMultiTenancy) {\r\n\t\t\tthis._queryBuilders.push(new TenantQueryBuilder<TEntity, TModel, TUk>(_EntityClass));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets current date time in UTC.\r\n\t */\r\n\tpublic get utcNow(): moment.Moment {\r\n\t\treturn moment(new Date()).utc();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IRepository.countAll\r\n\t */\r\n\tpublic async countAll(opts: cc.RepositoryCountAllOptions = {}): Promise<number> {\r\n\t\tlet result = await this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildCountAll(query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<TEntity>>((prevQuery, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildCountAll(prevQuery, query.clone(), opts); \r\n\t\t\t\t}, null);\r\n\t\t\t\tdebug('COUNT ALL: %s', q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession\r\n\t\t);\r\n\r\n\t\t// In case with Postgres, `count` returns a bigint type which will be a String \r\n\t\t// and not a Number.\r\n\t\treturn +(result[0]['total']);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.create\r\n\t */\r\n\tpublic create(model: TModel, opts: cc.RepositoryCreateOptions = {}): Promise<TModel & TModel[]> {\r\n\t\tif (model.hasOwnProperty('createdAt')) {\r\n\t\t\tmodel['createdAt'] = model['updatedAt'] = this.utcNow.toDate();\r\n\t\t}\r\n\t\tlet entity = this.toEntity(model, false);\r\n\r\n\t\treturn this.executeQuery(query => query.insert(entity), opts.atomicSession)\r\n\t\t\t.then(() => <any>model);\r\n\t}\r\n\r\n\t/**\r\n\t * @see ISoftDelRepository.deleteSoft\r\n\t */\r\n\tpublic deleteSoft(pk: TPk, opts: cc.RepositoryDeleteOptions = {}): Promise<number> {\r\n\t\treturn this.setDeleteState(pk, true, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.deleteHard\r\n\t */\r\n\tpublic deleteHard(pk: TPk, opts: cc.RepositoryDeleteOptions = {}): Promise<number> {\r\n\t\treturn this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildDeleteHard(pk, query);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilderSingle<number>>((prevQuery: any, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildDeleteHard(pk, prevQuery, query.clone());\r\n\t\t\t\t}, null);\r\n\t\t\t\tdebug('HARD DELETE: %s', q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.exists\r\n\t */\r\n\tpublic async exists(props: TUk, opts: cc.RepositoryExistsOptions = {}): Promise<boolean> {\r\n\t\tlet result = await this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildExists(props, query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<TEntity>>((prevQuery, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildExists(this.toArr(props, this.ukCol), prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tdebug('EXIST: %s', q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession\r\n\t\t);\r\n\r\n\t\treturn result[0]['total'] != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.findByPk\r\n\t */\r\n\tpublic findByPk(pk: TPk, opts: cc.RepositoryFindOptions = {}): Promise<TModel> {\r\n\t\treturn this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildFind(pk, query);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<TEntity>>((prevQuery, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildFind(pk, prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tdebug('FIND BY (%s): %s', pk, q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession)\r\n\t\t\t.then(foundEnt => {\r\n\t\t\t\treturn foundEnt ? this.toDTO(foundEnt, false) : null;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.page\r\n\t */\r\n\tpublic async page(pageIndex: number, pageSize: number, opts: cc.RepositoryPageOptions = {}): Promise<cc.PagedArray<TModel>> {\r\n\t\tlet foundList: { total: number, results: Array<TEntity> },\r\n\t\t\tdtoList: TModel[],\r\n\t\t\taffectedRows: number;\r\n\r\n\t\tfoundList = await this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildPage(pageIndex, pageSize, query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<TEntity>>((prevQuery, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildPage(pageIndex, pageSize, prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tdebug('PAGE: %s', q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession\r\n\t\t);\r\n\r\n\t\tif (!foundList || isEmpty(foundList.results)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tdtoList = this.toDTO(foundList.results, false);\r\n\t\treturn new cc.PagedArray<TModel>(foundList.total, ...dtoList);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.patch\r\n\t */\r\n\tpublic patch(model: Partial<TModel>, opts: cc.RepositoryPatchOptions = {}): Promise<Partial<TModel> & Partial<TModel>[]> {\r\n\t\tlet entity = this.toEntity(model, true);\r\n\r\n\t\t// We check property in \"entity\" because the \"model\" here is partial.\r\n\t\tif (entity.hasOwnProperty('updatedAt')) {\r\n\t\t\t(<any>model)['updatedAt'] = this.utcNow.toDate();\r\n\t\t\tentity['updatedAt'] = this.utcNow.format();\r\n\t\t}\r\n\r\n\t\treturn this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildPatch(entity, query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<number>>((prevQuery: any, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildPatch(entity, prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tdebug('PATCH (%o): %s', entity, q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession)\r\n\t\t\t// `query.patch` returns number of affected rows, but we want to return the updated model.\r\n\t\t\t.then(count => count ? <any>model : null);\r\n\t}\r\n\r\n\t/**\r\n\t * @see ISoftDelRepository.recover\r\n\t */\r\n\tpublic async recover(pk: TPk, opts: cc.RepositoryRecoverOptions = {}): Promise<number> {\r\n\t\t// let options = this.buildRecoverOpts(pk, opts),\r\n\t\tlet options = this._queryBuilders.reduce<cc.RepositoryExistsOptions>((prevOpts: any, currBuilder) => {\r\n\t\t\treturn currBuilder.buildRecoverOpts(pk, prevOpts, opts);\r\n\t\t}, null);\r\n\r\n\t\t// Fetch the recovered record\r\n\t\tlet model = await this.findByPk(pk, options);\r\n\r\n\t\t// If record doesn't exist\r\n\t\tif (!model) { return 0; }\r\n\r\n\t\t// If another ACTIVE record with same unique keys exists\r\n\t\toptions.includeDeleted = false;\r\n\t\tif (await this.exists(<any>model, options)) {\r\n\t\t\tthrow new MinorException('DUPLICATE_UNIQUE_KEY');\r\n\t\t}\r\n\t\treturn this.setDeleteState(pk, false, opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRepository.update\r\n\t */\r\n\tpublic update(model: TModel, opts: cc.RepositoryUpdateOptions = {}): Promise<TModel> {\r\n\t\tif (model.hasOwnProperty('updatedAt')) {\r\n\t\t\tmodel['updatedAt'] = this.utcNow.toDate();\r\n\t\t}\r\n\t\tlet entity = this.toEntity(model, false),\r\n\t\t\taffectedRows: number;\r\n\r\n\r\n\t\treturn this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildUpdate(entity, query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<number>>((prevQuery: any, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildUpdate(entity, prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tdebug('UPDATE (%o): %s', entity, q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t}, opts.atomicSession)\r\n\t\t\t// `query.update` returns number of affected rows, but we want to return the updated model.\r\n\t\t\t.then(count => count ? <any>model : null);\r\n\t}\r\n\r\n\t/**\r\n\t * Executing an query\r\n\t */\r\n\tpublic executeQuery(callback: QueryCallback<TEntity>, atomicSession?: cc.AtomicSession): Promise<any> {\r\n\t\treturn this.prepare(callback, atomicSession);\r\n\t}\r\n\r\n\t/**\r\n\t * Translates from DTO model(s) to entity model(s).\r\n\t */\r\n\tpublic toEntity(dto: TModel | TModel[] | Partial<TModel>, isPartial: boolean): TEntity & TEntity[] {\r\n\t\tif (!dto) { return null; }\r\n\r\n\t\tlet entity;\r\n\t\tif (isPartial) {\r\n\t\t\tentity = this._EntityClass.translator.partial(dto);\r\n\t\t}\r\n\t\tentity = this._EntityClass.translator.whole(dto);\r\n\r\n\t\tfor (let prop of ['createdAt', 'updatedAt', 'deletedAt']) {\r\n\t\t\tif (dto[prop]) {\r\n\t\t\t\tentity[prop] = moment.utc(dto[prop]).format();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn entity;\r\n\t}\r\n\r\n\t/**\r\n\t * Translates from entity model(s) to DTO model(s).\r\n\t */\r\n\tpublic toDTO(entity: TEntity | TEntity[] | Partial<TEntity>, isPartial: boolean): TModel & TModel[] {\r\n\t\tif (!entity) { return null; }\r\n\r\n\t\tlet dto;\r\n\t\tif (isPartial) {\r\n\t\t\tdto = this._EntityClass.translator.partial(entity, { enableValidation: false });\r\n\t\t}\r\n\t\t// Disable validation because it's unnecessary.\r\n\t\tdto = this._EntityClass.translator.whole(entity, { enableValidation: false });\r\n\r\n\t\tfor (let prop of ['createdAt', 'updatedAt', 'deletedAt']) {\r\n\t\t\tif (entity[prop]) {\r\n\t\t\t\tdto[prop] = moment.utc(entity[prop]).toDate();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn dto;\r\n\t}\r\n\r\n\t/**\r\n\t * Maps from an array of columns to array of values.\r\n\t * @param pk Object to get values from\r\n\t * @param cols Array of column names\r\n\t */\r\n\tpublic toArr(pk: TPk | TEntity | Partial<TEntity>, cols: string[]): any[] {\r\n\t\treturn cols.map(c => pk[c]);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.query\r\n\t */\r\n\tprotected prepare(callback: QueryCallback<TEntity>, atomicSession?: cc.AtomicSession): Promise<any> {\r\n\t\treturn this._dbConnector.prepare(this._EntityClass, <any>callback, atomicSession);\r\n\t}\r\n\r\n\tprotected buildDeleteState(pk: TPk, isDel: boolean): any {\r\n\t\tlet delta: any,\r\n\t\t\tdeletedAt = (isDel ? this.utcNow.format() : null);\r\n\r\n\t\tif (this._options.isMultiTenancy) {\r\n\t\t\treturn Object.assign(pk, { deletedAt });\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tid: pk,\r\n\t\t\t\tdeletedAt\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setDeleteState(pk: TPk, isDel: boolean, opts: cc.RepositoryDeleteOptions = {}): Promise<number> {\r\n\t\tlet delta = this.buildDeleteState(pk, isDel);\r\n\r\n\t\treturn this.executeQuery(\r\n\t\t\tquery => {\r\n\t\t\t\t// let q = this.buildPatch(delta, query, opts);\r\n\t\t\t\tlet q = this._queryBuilders.reduce<QueryBuilder<number>>((prevQuery: any, currBuilder) => {\r\n\t\t\t\t\treturn currBuilder.buildPatch(delta, prevQuery, query.clone(), opts);\r\n\t\t\t\t}, null);\r\n\t\t\t\tdebug('DEL STATE (%s): %s', isDel, q.toSql());\r\n\t\t\t\treturn q;\r\n\t\t\t},\r\n\t\t\topts.atomicSession);\r\n\t}\r\n}"]}