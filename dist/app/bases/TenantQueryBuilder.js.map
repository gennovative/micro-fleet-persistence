{"version":3,"sources":["app/bases/TenantQueryBuilder.ts"],"names":[],"mappings":";;AAOA;IAGC,YAAoB,YAAY;QAAZ,iBAAY,GAAZ,YAAY,CAAA;IAChC,CAAC;IAGM,aAAa,CAAC,SAAgC,EAAE,QAA+B,EAAE,OAAqC,EAAE;QAC9H,OAAO,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAEM,eAAe,CAAC,EAAY,EAAE,SAAgC,EAAE,QAA+B;QACrG,OAAO,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;IACtE,CAAC;IAEM,WAAW,CAAC,KAAU,EAAE,SAAgC,EAAE,QAA+B,EAAE,OAAmC,EAAE;QACtI,OAAO,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAEM,SAAS,CAAC,EAAY,EAAE,SAAgC,EAAE,QAA+B,EAAE,OAAiC,EAAE;QACpI,OAAO,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;IACpE,CAAC;IAEM,SAAS,CAAC,SAAiB,EAAE,QAAgB,EAAE,SAAgC,EAAE,QAA+B,EAAE,OAAiC,EAAE;QAC3J,OAAO,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAEM,UAAU,CAAC,MAAe,EAAE,SAAgC,EAAE,QAA+B,EAAE,OAAkC,EAAE;QACzI,OAAY,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;IAClI,CAAC;IAEM,gBAAgB,CAAC,EAAY,EAAE,QAAqC,EAAE,OAAoC;QAChH,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC;QACnC,OAAO,QAAQ,CAAC;IACjB,CAAC;IAEM,WAAW,CAAC,MAAe,EAAE,SAAgC,EAAE,QAA+B,EAAE,OAAkC,EAAE;QAC1I,OAAY,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;IACnI,CAAC;IAGO,KAAK,CAAC,EAAyC,EAAE,GAAU;QAClE,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;CACD;AA5CD,gDA4CC","file":"TenantQueryBuilder.js","sourcesContent":["import { QueryBuilder, QueryBuilderSingle } from 'objection';\r\nimport * as cc from '@micro-fleet/common-contracts';\r\n\r\nimport { IQueryBuilder } from './IQueryBuilder';\r\nimport { EntityBase } from './EntityBase';\r\n\r\n\r\nexport class TenantQueryBuilder<TEntity extends EntityBase, TModel extends IModelDTO, TUk = NameUk>\r\n\timplements IQueryBuilder<TEntity, TModel, TenantPk, TUk> {\r\n\r\n\tconstructor(private _EntityClass) {\r\n\t}\r\n\r\n\r\n\tpublic buildCountAll(prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryCountAllOptions = {}): QueryBuilder<TEntity> {\r\n\t\treturn prevQuery.where('tenant_id', opts.tenantId);\r\n\t}\r\n\r\n\tpublic buildDeleteHard(pk: TenantPk, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>): QueryBuilderSingle<number> {\r\n\t\treturn rawQuery.deleteById(this.toArr(pk, this._EntityClass.idProp));\r\n\t}\r\n\r\n\tpublic buildExists(props: TUk, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryExistsOptions = {}): QueryBuilder<TEntity> {\r\n\t\treturn prevQuery.where('tenant_id', opts.tenantId);\r\n\t}\r\n\r\n\tpublic buildFind(pk: TenantPk, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryFindOptions = {}): QueryBuilder<TEntity> {\r\n\t\treturn rawQuery.findById(this.toArr(pk, this._EntityClass.idProp));\r\n\t}\r\n\r\n\tpublic buildPage(pageIndex: number, pageSize: number, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryPageOptions = {}): QueryBuilder<TEntity> {\r\n\t\treturn prevQuery.where('tenant_id', opts.tenantId);\r\n\t}\r\n\r\n\tpublic buildPatch(entity: TEntity, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryPatchOptions = {}): QueryBuilder<number> {\r\n\t\treturn <any>rawQuery.patch(entity).whereComposite(this._EntityClass.idColumn, '=', this.toArr(entity, this._EntityClass.idProp));\r\n\t}\r\n\r\n\tpublic buildRecoverOpts(pk: TenantPk, prevOpts: cc.RepositoryRecoverOptions, rawOpts: cc.RepositoryRecoverOptions): cc.RepositoryExistsOptions {\r\n\t\tprevOpts['tenantId'] = pk.tenantId;\r\n\t\treturn prevOpts;\r\n\t}\r\n\r\n\tpublic buildUpdate(entity: TEntity, prevQuery: QueryBuilder<TEntity>, rawQuery: QueryBuilder<TEntity>, opts: cc.RepositoryPatchOptions = {}): QueryBuilder<number> {\r\n\t\treturn <any>rawQuery.update(entity).whereComposite(this._EntityClass.idColumn, '=', this.toArr(entity, this._EntityClass.idProp));\r\n\t}\r\n\r\n\r\n\tprivate toArr(pk: TenantPk | TEntity | Partial<TEntity>, arr: any[]): any[] {\r\n\t\treturn arr.map(c => pk[c]);\r\n\t}\r\n}"]}