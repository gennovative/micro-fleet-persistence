{"version":3,"sources":["app/bases/VersionControlledProcessor.ts"],"names":[],"mappings":"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","file":"VersionControlledProcessor.js","sourcesContent":["const every = require('lodash/every');\r\nconst isEmpty = require('lodash/isEmpty');\r\nimport { QueryBuilder, QueryBuilderSingle } from 'objection';\r\nimport * as moment from 'moment';\r\nimport { MinorException } from 'back-lib-common-util';\r\nimport * as cc from 'back-lib-common-contracts';\r\n\r\nimport { AtomicSessionFactory } from '../atom/AtomicSessionFactory';\r\nimport { IDatabaseConnector, QueryCallback } from '../connector/IDatabaseConnector';\r\nimport { EntityBase } from './EntityBase';\r\nimport { MonoProcessor, ProcessorOptions } from './MonoProcessor';\r\nimport { VersionQueryBuilder } from './VersionQueryBuilder';\r\n\r\n\r\nexport class VersionControlledProcessor<TEntity extends EntityBase, TModel extends IModelDTO, TPk extends PkType, TUk = NameUk> \r\n\textends MonoProcessor<TEntity, TModel, TPk, TUk> {\r\n\r\n\tprivate _triggerProps: string[];\r\n\tprivate _atomFac: AtomicSessionFactory;\r\n\r\n\tconstructor(EntityClass,\r\n\t\t\tdbConnector: IDatabaseConnector,\r\n\t\t\toptions: ProcessorOptions = {}) {\r\n\t\tsuper(EntityClass, dbConnector, options);\r\n\t\tthis._triggerProps = options.triggerProps;\r\n\t\tthis._queryBuilders.push(new VersionQueryBuilder<TEntity, TModel, TPk, TUk>(EntityClass));\r\n\t\tthis._atomFac = new AtomicSessionFactory(dbConnector);\r\n\t}\r\n\r\n\r\n\tpublic create(model: TModel, opts: cc.RepositoryCreateOptions = {}): Promise<TModel & TModel[]> {\r\n\t\tlet entity: TEntity = this.toEntity(model, false);\r\n\t\tif (!entity['version']) {\r\n\t\t\tentity['version'] = model['version'] = 1;\r\n\t\t}\r\n\r\n\t\treturn this.executeCommand(query => query.insert(entity), opts.atomicSession)\r\n\t\t\t.then(() => <any>model);\r\n\t}\r\n\r\n\tpublic patch(model: Partial<TModel>, opts: cc.RepositoryPatchOptions = {}): Promise<Partial<TModel> & Partial<TModel>[]> {\r\n\t\tif (this.isIntersect(Object.keys(model), this._triggerProps)) {\r\n\t\t\treturn <any>this.saveAsNew(null, model);\r\n\t\t}\r\n\t\treturn super.patch.apply(this, arguments);\r\n\t}\r\n\r\n\tpublic update(model: TModel, opts: cc.RepositoryUpdateOptions = {}): Promise<TModel & TModel[]> {\r\n\t\tif (this.isIntersect(Object.keys(model), this._triggerProps)) {\r\n\t\t\treturn <any>this.saveAsNew(null, model);\r\n\t\t}\r\n\t\treturn super.update.apply(this, arguments);\r\n\t}\r\n\r\n\r\n\tprivate async saveAsNew(pk: TPk, updatedModel: TModel | Partial<TModel>): Promise<TModel> {\r\n\t\tlet source: TModel = await this.findByPk(pk || <any>updatedModel);\r\n\t\tif (!source) { return null; }\r\n\r\n\t\tlet flow = this._atomFac.startSession();\r\n\t\tflow\r\n\t\t\t.pipe(s => {\r\n\t\t\t\tupdatedModel['isMain'] = false;\r\n\t\t\t\treturn super.patch(updatedModel);\r\n\t\t\t})\r\n\t\t\t.pipe(s => {\r\n\t\t\t\tlet clone = Object.assign({}, source, updatedModel, { version: source['version'] + 1 });\r\n\t\t\t\treturn this.create(clone);\r\n\t\t\t});\r\n\t\treturn flow.closePipe();\r\n\t}\r\n\r\n\tprivate isIntersect(arr1: any[], arr2: any[]): boolean {\r\n\t\tfor (let a of arr1) {\r\n\t\t\tif (arr2.includes(a)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}"]}