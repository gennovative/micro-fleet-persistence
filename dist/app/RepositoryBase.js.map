{"version":3,"sources":["app/RepositoryBase.ts"],"names":[],"mappings":"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","file":"RepositoryBase.js","sourcesContent":["import { QueryBuilder } from 'objection';\r\nimport { injectable, Guard } from 'back-lib-common-util';\r\nimport { EntityBase } from './EntityBase';\r\n\r\nexport class PagedArray<T> extends Array<T> {\r\n\r\n\t/**\r\n\t * Gets total number of items in database.\r\n\t */\r\n\tpublic get total(): number {\r\n\t\treturn this._total;\r\n\t}\r\n\r\n\tconstructor(private _total, source: Array<T>) {\r\n\t\tsuper();\r\n\t\tArray.prototype.push.apply(this, source);\r\n\t}\r\n}\r\n\r\nexport interface IRepository<TModel extends IModelDTO> {\r\n\tcountAll(): Promise<number>;\r\n\tcreate(model: TModel): Promise<TModel>;\r\n\tdelete(id: number): Promise<number>;\r\n\tfind(id: number): Promise<TModel>;\r\n\tpage(pageIndex: number, pageSize: number): Promise<PagedArray<TModel>>;\r\n\tpatch(model: Partial<TModel>): Promise<number>;\r\n\tupdate(model: TModel): Promise<number>;\r\n}\r\n\r\n@injectable()\r\nexport abstract class RepositoryBase<TEntity extends EntityBase, TModel extends IModelDTO>\r\n\t\t\timplements IRepository<TModel> {\r\n\r\n\tconstructor(protected _modelMapper: AutoMapper) {\r\n\t\tGuard.assertDefined('modelMapper', this._modelMapper);\r\n\t\tthis.createModelMap();\r\n\t}\r\n\r\n\tpublic async countAll(): Promise<number> {\r\n\t\tlet result = await this.query().count('id as total');\r\n\t\t\r\n\t\t// In case with Postgres, `count` returns a bigint type which will be a String \r\n\t\t// and not a Number.\r\n\t\t/* istanbul ignore next */\r\n\t\treturn (result && result.length ? +(result[0]['total']) : 0);\r\n\t}\r\n\r\n\tpublic async create(model: TModel): Promise<TModel> {\r\n\t\tlet newEnt = await this.query().insert(model);\r\n\t\treturn this.toDTO(newEnt);\r\n\t}\r\n\r\n\tpublic async delete(id: number): Promise<number> {\r\n\t\tlet affectedRows = await this.query().deleteById(id);\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\tpublic async find(id: number): Promise<TModel> {\r\n\t\tlet foundEnt = await this.query().findById(id);\r\n\t\treturn this.toDTO(foundEnt);\r\n\t}\r\n\r\n\tpublic async patch(model: Partial<TModel>): Promise<number> {\r\n\t\tGuard.assertDefined('entity.id', model.id);\r\n\t\tlet affectedRows = await this.query().where('id', model.id).patch(<TModel>model);\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\tpublic async page(pageIndex: number, pageSize: number): Promise<PagedArray<TModel>> {\r\n\t\tlet foundList: { total: number, results: Array<TEntity>},\r\n\t\t\tdtoList: TModel[];\r\n\t\t\r\n\t\tfoundList = await <any>this.query().page(pageIndex, pageSize);\r\n\t\tif (!foundList || !foundList.results || !foundList.results.length) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tdtoList = this.toDTO(foundList.results);\r\n\t\treturn new PagedArray<TModel>(foundList.total, dtoList);\r\n\t}\r\n\r\n\tpublic async update(model: TModel): Promise<number> {\r\n\t\tGuard.assertDefined('entity.id', model.id);\r\n\t\tlet affectedRows = await this.query().where('id', model.id).update(model);\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\tprotected abstract query(): QueryBuilder<TEntity>;\r\n\tprotected abstract createModelMap(): void;\r\n\tprotected abstract toEntity(from: TModel | TModel[]): TEntity & TEntity[];\r\n\tprotected abstract toDTO(from: TEntity | TEntity[]): TModel & TModel[];\r\n}"]}