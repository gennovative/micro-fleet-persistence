{"version":3,"sources":["app/RepositoryBase.ts"],"names":[],"mappings":"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","file":"RepositoryBase.js","sourcesContent":["import { injectable, Guard } from 'back-lib-common-util';\r\nimport { PagedArray, IRepository } from 'back-lib-common-contracts';\r\n\r\nimport { EntityBase } from './EntityBase';\r\nimport { IDatabaseConnector, QueryCallback } from './IDatabaseConnector';\r\n\r\n\r\n@injectable()\r\nexport abstract class RepositoryBase<TEntity extends EntityBase, TModel extends IModelDTO>\r\n\timplements IRepository<TModel> {\r\n\r\n\tconstructor(\r\n\t\tprotected _modelMapper: AutoMapper,\r\n\t\tprotected _dbConnector: IDatabaseConnector\r\n\t) {\r\n\t\tGuard.assertDefined('modelMapper', this._modelMapper);\r\n\t\tthis.createModelMap();\r\n\t}\r\n\r\n\tpublic async countAll(): Promise<number> {\r\n\t\tlet promises = this.query(query => {\r\n\t\t\treturn query.count('id as total');\r\n\t\t}, '0'), // Only fetch data from primary connection. By convention, the firstly added connection is the primary.\r\n\t\t\tresult = await this.first(promises);\r\n\r\n\t\t// In case with Postgres, `count` returns a bigint type which will be a String \r\n\t\t// and not a Number.\r\n\t\t/* istanbul ignore next */\r\n\t\treturn (result && result.length ? +(result[0]['total']) : 0);\r\n\t}\r\n\r\n\tpublic async create(model: TModel): Promise<TModel> {\r\n\t\tlet promises = this.query(query => {\r\n\t\t\treturn query.insert(model);\r\n\t\t}),\r\n\t\t\tnewEnt = await this.first(promises);\r\n\r\n\t\treturn this.toDTO(newEnt);\r\n\t}\r\n\r\n\tpublic async delete(id: number): Promise<number> {\r\n\t\tlet promises = this.query(query => {\r\n\t\t\treturn query.deleteById(id);\r\n\t\t}),\r\n\t\t\taffectedRows = await this.first(promises);\r\n\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\tpublic async find(id: number): Promise<TModel> {\r\n\t\tlet promises = this.query(query => {\r\n\t\t\treturn query.findById(id);\r\n\t\t}, '0'),\r\n\t\t\tfoundEnt = await this.first(promises);\r\n\r\n\t\treturn this.toDTO(foundEnt);\r\n\t}\r\n\r\n\tpublic async patch(model: Partial<TModel>): Promise<number> {\r\n\t\tGuard.assertDefined('entity.id', model.id);\r\n\r\n\t\tlet promises = this.query(query => {\r\n\t\t\treturn query.where('id', model.id).patch(<TModel>model);\r\n\t\t}),\r\n\t\t\taffectedRows = await this.first(promises);\r\n\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\tpublic async page(pageIndex: number, pageSize: number): Promise<PagedArray<TModel>> {\r\n\t\tlet foundList: { total: number, results: Array<TEntity> },\r\n\t\t\tdtoList: TModel[],\r\n\t\t\taffectedRows;\r\n\r\n\t\tlet promises = this.query(query => {\r\n\t\t\treturn query.page(pageIndex, pageSize);\r\n\t\t}, '0');\r\n\r\n\t\tfoundList = await this.first(promises);\r\n\t\tif (!foundList || !foundList.results || !foundList.results.length) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tdtoList = this.toDTO(foundList.results);\r\n\t\treturn new PagedArray<TModel>(foundList.total, dtoList);\r\n\t}\r\n\r\n\tpublic async update(model: TModel): Promise<number> {\r\n\t\tGuard.assertDefined('entity.id', model.id);\r\n\r\n\t\tlet promises = this.query(query => {\r\n\t\t\treturn query.where('id', model.id).update(model);\r\n\t\t}),\r\n\t\t\taffectedRows = await this.first(promises);\r\n\r\n\t\treturn affectedRows;\r\n\t}\r\n\r\n\t/**\r\n\t * Waits for query execution on first connection which is primary,\r\n\t * do not care about the others, which is for backup.\r\n\t * TODO: Consider putting database access layer in a separate microservice.\r\n\t */\r\n\tprotected async first(promises: Promise<any>[]) {\r\n\t\treturn await promises[0];\r\n\t}\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.query\r\n\t */\r\n\tprotected abstract query<TEntity>(callback: QueryCallback<TEntity>, ...names: string[]): Promise<any>[];\r\n\tprotected abstract createModelMap(): void;\r\n\tprotected abstract toEntity(from: TModel | TModel[]): TEntity & TEntity[];\r\n\tprotected abstract toDTO(from: TEntity | TEntity[]): TModel & TModel[];\r\n}"]}