{"version":3,"sources":["app/atom/AtomicSessionFactory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,0DAAqE;AAGrE,oCAAiC;AAEjC,2DAAwD;AAGxD;;GAEG;AAEH,IAAa,oBAAoB,GAAjC;IAEC,YACuC,YAAgC;QAAhC,iBAAY,GAAZ,YAAY,CAAoB;QAEtE,mBAAK,CAAC,gBAAgB,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IACtD,CAAC;IAED;;;OAGG;IACI,YAAY,CAAC,GAAG,KAAe;QACrC,OAAO,IAAI,qCAAiB,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IACxD,CAAC;CACD,CAAA;AAfY,oBAAoB;IADhC,wBAAU,EAAE;IAIV,WAAA,oBAAM,CAAC,aAAK,CAAC,YAAY,CAAC,CAAA;;GAHhB,oBAAoB,CAehC;AAfY,oDAAoB","file":"AtomicSessionFactory.js","sourcesContent":["import { injectable, inject, Guard } from '@micro-fleet/common-util';\r\nimport { AtomicSession } from '@micro-fleet/common-contracts';\r\n\r\nimport { Types } from '../Types';\r\nimport { IDatabaseConnector } from '../connector/IDatabaseConnector';\r\nimport { AtomicSessionFlow } from './AtomicSessionFlow';\r\n\r\n\r\n/**\r\n * Provides methods to create atomic sessions.\r\n */\r\n@injectable()\r\nexport class AtomicSessionFactory {\r\n\r\n\tconstructor(\r\n\t\t@inject(Types.DB_CONNECTOR) protected _dbConnector: IDatabaseConnector\r\n\t) {\r\n\t\tGuard.assertArgDefined('_dbConnector', _dbConnector);\r\n\t}\r\n\r\n\t/**\r\n\t * Starts executing queries in transactions.\r\n\t * @param {string[]} names Only executes the queries on connections with specified names.\r\n\t */\r\n\tpublic startSession(...names: string[]): AtomicSessionFlow {\r\n\t\treturn new AtomicSessionFlow(this._dbConnector, names);\r\n\t}\r\n}"]}