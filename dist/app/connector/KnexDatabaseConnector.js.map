{"version":3,"sources":["app/connector/KnexDatabaseConnector.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,6BAA6B;AAE7B,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAE1C,0DAA6E;AAO7E;;GAEG;AAEH,IAAa,qBAAqB,GAAlC;IAKC;QACC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,IAAW,UAAU;QACpB,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IAED;;OAEG;IACI,IAAI,CAAC,MAA2B;QACtC,mBAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAEzC,MAAM,QAAQ,GAAG;YACf,MAAM,EAAE,MAAM,CAAC,UAAU;YACzB,gBAAgB,EAAE,IAAI;YACtB,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;SAC1C,EACD,QAAQ,GACT,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACU,OAAO;;YACnB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACnB,CAAC;KAAA;IAED;;OAEG;IACI,OAAO,CAA6B,WAAW,EAAE,QAAgC,EAAE,aAA6B;QACtH,mBAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,uDAAuD,CAAC,CAAC;QAClG,IAAI,aAAa,EAAE;YAClB,OAAO,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;SAC5E;QACD,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAGO,iBAAiB,CAAC,MAA2B;QACpD,yCAAyC;QACzC,IAAI,MAAM,CAAC,QAAQ,EAAE;YACpB,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC;SACrC;QAED,kDAAkD;QAClD,IAAI,MAAM,CAAC,gBAAgB,EAAE;YAC5B,OAAO,MAAM,CAAC,gBAAgB,CAAC;SAC/B;QAED,gDAAgD;QAChD,IAAI,MAAM,CAAC,IAAI,EAAE;YAChB,OAAO;gBACN,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO;gBACzB,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI;gBACtB,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ;gBAC9B,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ;aAC9B,CAAC;SACF;QACD,MAAM,IAAI,4BAAc,CAAC,uBAAuB,CAAC,CAAC;IACnD,CAAC;IAEO,kBAAkB,CAAU,WAAW,EAAE,QAAgC;QAChF,IAAI,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3D,OAAO,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;IACpD,CAAC;IAEO,yBAAyB,CAAU,WAAW,EAAE,QAAgC,EAAE,aAA6B;QACtH,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QACzE,OAAO,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,eAAe,CAAC,EAAE,UAAU,CAAC,CAAC;IACjF,CAAC;CAED,CAAA;AArFY,qBAAqB;IADjC,wBAAU,EAAE;;GACA,qBAAqB,CAqFjC;AArFY,sDAAqB","file":"KnexDatabaseConnector.js","sourcesContent":["import * as knex from 'knex';\r\nimport { Model, QueryBuilder, transaction } from 'objection';\r\nconst isEmpty = require('lodash/isEmpty');\r\n\r\nimport { injectable, Guard, MinorException } from '@micro-fleet/common-util';\r\nimport { AtomicSession, IDbConnectionDetail } from '@micro-fleet/common-contracts';\r\n\r\nimport { EntityBase } from '../bases/EntityBase';\r\nimport { IDatabaseConnector, QueryCallback, KnexConnection } from './IDatabaseConnector';\r\n\r\n\r\n/**\r\n * Provides settings from package\r\n */\r\n@injectable()\r\nexport class KnexDatabaseConnector implements IDatabaseConnector {\r\n\t\r\n\tprivate _connection: KnexConnection;\r\n\tprivate _knex; // for unittest mocking\r\n\r\n\tconstructor() {\r\n\t\tthis._knex = knex;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.connection\r\n\t */\r\n\tpublic get connection(): KnexConnection {\r\n\t\treturn this._connection;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.init\r\n\t */\r\n\tpublic init(detail: IDbConnectionDetail): void {\r\n\t\tGuard.assertArgDefined('detail', detail);\r\n\r\n\t\tconst settings = {\r\n\t\t\t\tclient: detail.clientName,\r\n\t\t\t\tuseNullAsDefault: true,\r\n\t\t\t\tconnection: this.buildConnSettings(detail)\r\n\t\t\t},\r\n\t\t\tknexConn: KnexConnection = \r\n\t\tthis._connection = this._knex(settings);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.dispose\r\n\t */\r\n\tpublic async dispose(): Promise<void> {\r\n\t\tthis._connection.destroy();\r\n\t\tthis._connection = null;\r\n\t\tthis._knex = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.prepare\r\n\t */\r\n\tpublic prepare<TEntity extends EntityBase>(EntityClass, callback: QueryCallback<TEntity>, atomicSession?: AtomicSession): Promise<any> {\r\n\t\tGuard.assertIsNotEmpty(this._connection, 'Must call addConnection() before executing any query.');\r\n\t\tif (atomicSession) {\r\n\t\t\treturn this.prepareTransactionalQuery(EntityClass, callback, atomicSession);\r\n\t\t}\r\n\t\treturn this.prepareSimpleQuery(EntityClass, callback);\r\n\t}\r\n\r\n\r\n\tprivate buildConnSettings(detail: IDbConnectionDetail): any {\r\n\t\t// 1st priority: connect to a local file.\r\n\t\tif (detail.filePath) {\r\n\t\t\treturn { filename: detail.filePath };\r\n\t\t}\r\n\r\n\t\t// 2nd priority: connect with a connection string.\r\n\t\tif (detail.connectionString) {\r\n\t\t\treturn detail.connectionString;\r\n\t\t}\r\n\r\n\t\t// Last priority: connect with host credentials.\r\n\t\tif (detail.host) {\r\n\t\t\treturn {\r\n\t\t\t\thost: detail.host.address,\r\n\t\t\t\tuser: detail.host.user,\r\n\t\t\t\tpassword: detail.host.password,\r\n\t\t\t\tdatabase: detail.host.database,\r\n\t\t\t};\r\n\t\t}\r\n\t\tthrow new MinorException('No database settings!');\r\n\t}\r\n\r\n\tprivate prepareSimpleQuery<TEntity>(EntityClass, callback: QueryCallback<TEntity>): Promise<any> {\r\n\t\tlet BoundClass = EntityClass['bindKnex'](this._connection);\r\n\t\treturn callback(BoundClass['query'](), BoundClass);\r\n\t}\r\n\r\n\tprivate prepareTransactionalQuery<TEntity>(EntityClass, callback: QueryCallback<TEntity>, atomicSession?: AtomicSession): Promise<any> {\r\n\t\tconst BoundClass = EntityClass['bindKnex'](atomicSession.knexConnection);\r\n\t\treturn callback(BoundClass['query'](atomicSession.knexTransaction), BoundClass);\r\n\t}\r\n\r\n}"]}