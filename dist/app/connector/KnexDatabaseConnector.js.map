{"version":3,"sources":["app/connector/KnexDatabaseConnector.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6BAA6B;AAE7B,MAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAE1C,+DAAyE;AAOzE;;GAEG;AAEH,IAAa,qBAAqB,GAAlC;IAKC;QACC,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,IAAW,WAAW;QACrB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,aAAa,CAAC,MAA2B,EAAE,IAAa;QAC9D,4BAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAEzC,IAAI,QAAQ,GAAG;YACb,MAAM,EAAE,MAAM,CAAC,UAAU;YACzB,gBAAgB,EAAE,IAAI;YACtB,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;SAC1C,EACD,QAAQ,GAAmB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAChD,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACI,OAAO;QACb,IAAI,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAClD,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,OAAY,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC1C,CAAC;IAED;;OAEG;IACI,OAAO,CAA6B,WAAW,EAAE,QAAgC,EAAE,aAA6B,EAAE,GAAG,KAAe;QAC1I,4BAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,EAAE,uDAAuD,CAAC,CAAC;QACnG,IAAI,aAAa,EAAE;YAClB,OAAO,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;SAC5E;QACD,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC,CAAC;IACjE,CAAC;IAGO,iBAAiB,CAAC,MAA2B;QACpD,yCAAyC;QACzC,IAAI,MAAM,CAAC,QAAQ,EAAE;YACpB,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC;SACrC;QAED,kDAAkD;QAClD,IAAI,MAAM,CAAC,gBAAgB,EAAE;YAC5B,OAAO,MAAM,CAAC,gBAAgB,CAAC;SAC/B;QAED,gDAAgD;QAChD,IAAI,MAAM,CAAC,IAAI,EAAE;YAChB,OAAO;gBACN,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO;gBACzB,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI;gBACtB,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ;gBAC9B,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ;aAC9B,CAAC;SACF;QACD,MAAM,IAAI,qCAAc,CAAC,uBAAuB,CAAC,CAAC;IACnD,CAAC;IAEO,kBAAkB,CAAU,WAAW,EAAE,QAAgC,EAAE,GAAG,KAAe;QACpG,IAAI,KAAK,GAAmB,EAAE,EAC7B,UAAU,CAAC;QAEZ,KAAK,IAAI,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE;YACvC,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;gBACnB,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,CAAC;gBAC/C,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC;aACxD;iBAAM;gBACN,mFAAmF;gBACnF,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;oBACxC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,CAAC;oBAC/C,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC;iBACxD;aACD;SACD;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IAEO,yBAAyB,CAAU,WAAW,EAAE,QAAgC,EAAE,aAA6B;QACtH,IAAI,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QACvE,OAAO;YACN,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,eAAe,CAAC,EAAE,UAAU,CAAC;SACxE,CAAC;IACH,CAAC;CAED,CAAA;AA3GY,qBAAqB;IADjC,iCAAU,EAAE;;GACA,qBAAqB,CA2GjC;AA3GY,sDAAqB","file":"KnexDatabaseConnector.js","sourcesContent":["import * as knex from 'knex';\r\nimport { Model, QueryBuilder, transaction } from 'objection';\r\nconst isEmpty = require('lodash/isEmpty');\r\n\r\nimport { injectable, Guard, MinorException } from 'back-lib-common-util';\r\nimport { AtomicSession, IDbConnectionDetail } from 'back-lib-common-contracts';\r\n\r\nimport { EntityBase } from '../bases/EntityBase';\r\nimport { IDatabaseConnector, QueryCallback, KnexConnection } from './IDatabaseConnector';\r\n\r\n\r\n/**\r\n * Provides settings from package\r\n */\r\n@injectable()\r\nexport class KnexDatabaseConnector implements IDatabaseConnector {\r\n\t\r\n\tprivate _connections: KnexConnection[];\r\n\tprivate _knex; // for unittest mocking\r\n\r\n\tconstructor() {\r\n\t\tthis._connections = [];\r\n\t\tthis._knex = knex;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.connections\r\n\t */\r\n\tpublic get connections(): KnexConnection[] {\r\n\t\treturn this._connections;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.addConnection\r\n\t */\r\n\tpublic addConnection(detail: IDbConnectionDetail, name?: string): void {\r\n\t\tGuard.assertArgDefined('detail', detail);\r\n\r\n\t\tlet settings = {\r\n\t\t\t\tclient: detail.clientName,\r\n\t\t\t\tuseNullAsDefault: true,\r\n\t\t\t\tconnection: this.buildConnSettings(detail)\r\n\t\t\t},\r\n\t\t\tknexConn: KnexConnection = this._knex(settings);\r\n\t\t\tknexConn.customName = name ? name : (this._connections.length + '');\r\n\t\tthis._connections.push(knexConn);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.dispose\r\n\t */\r\n\tpublic dispose(): Promise<void> {\r\n\t\tlet destroyPromises = this._connections.map(conn => {\r\n\t\t\treturn conn['destroy']();\r\n\t\t});\r\n\t\tthis._knex = null;\r\n\t\tthis._connections = null;\r\n\t\treturn <any>Promise.all(destroyPromises);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IDatabaseConnector.prepare\r\n\t */\r\n\tpublic prepare<TEntity extends EntityBase>(EntityClass, callback: QueryCallback<TEntity>, atomicSession?: AtomicSession, ...names: string[]): Promise<any>[] {\r\n\t\tGuard.assertIsNotEmpty(this._connections, 'Must call addConnection() before executing any query.');\r\n\t\tif (atomicSession) {\r\n\t\t\treturn this.prepareTransactionalQuery(EntityClass, callback, atomicSession);\r\n\t\t}\r\n\t\treturn this.prepareSimpleQuery(EntityClass, callback, ...names);\r\n\t}\r\n\r\n\r\n\tprivate buildConnSettings(detail: IDbConnectionDetail): any {\r\n\t\t// 1st priority: connect to a local file.\r\n\t\tif (detail.filePath) {\r\n\t\t\treturn { filename: detail.filePath };\r\n\t\t}\r\n\r\n\t\t// 2nd priority: connect with a connection string.\r\n\t\tif (detail.connectionString) {\r\n\t\t\treturn detail.connectionString;\r\n\t\t}\r\n\r\n\t\t// Last priority: connect with host credentials.\r\n\t\tif (detail.host) {\r\n\t\t\treturn {\r\n\t\t\t\thost: detail.host.address,\r\n\t\t\t\tuser: detail.host.user,\r\n\t\t\t\tpassword: detail.host.password,\r\n\t\t\t\tdatabase: detail.host.database,\r\n\t\t\t};\r\n\t\t}\r\n\t\tthrow new MinorException('No database settings!');\r\n\t}\r\n\r\n\tprivate prepareSimpleQuery<TEntity>(EntityClass, callback: QueryCallback<TEntity>, ...names: string[]): Promise<any>[] {\r\n\t\tlet calls: Promise<any>[] = [],\r\n\t\t\tBoundClass;\r\n\r\n\t\tfor (let knexConn of this._connections) {\r\n\t\t\tif (isEmpty(names)) {\r\n\t\t\t\tBoundClass = EntityClass['bindKnex'](knexConn);\r\n\t\t\t\tcalls.push(callback(BoundClass['query'](), BoundClass));\r\n\t\t\t} else {\r\n\t\t\t\t// If connection names are specified, we only execute queries on those connections.\r\n\t\t\t\tif (names.includes(knexConn.customName)) {\r\n\t\t\t\t\tBoundClass = EntityClass['bindKnex'](knexConn);\r\n\t\t\t\t\tcalls.push(callback(BoundClass['query'](), BoundClass));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn calls;\r\n\t}\r\n\r\n\tprivate prepareTransactionalQuery<TEntity>(EntityClass, callback: QueryCallback<TEntity>, atomicSession?: AtomicSession): Promise<any>[] {\r\n\t\tlet BoundClass = EntityClass['bindKnex'](atomicSession.knexConnection);\r\n\t\treturn [\r\n\t\t\tcallback(BoundClass['query'](atomicSession.knexTransaction), BoundClass)\r\n\t\t];\r\n\t}\r\n\r\n}"]}