{"version":3,"sources":["app/connector/IDatabaseConnector.ts"],"names":[],"mappings":";;AAEA,oEAA8F;AAI9F,MAAM,EAAE,QAAQ,EAAE,GAAG,4BAAS,CAAC","file":"IDatabaseConnector.js","sourcesContent":["import * as knex from 'knex';\r\nimport { QueryBuilder } from 'objection';\r\nimport { AtomicSession, IDbConnectionDetail, constants } from '@micro-fleet/common-contracts';\r\n\r\nimport { EntityBase } from '../bases/EntityBase';\r\n\r\nconst { DbClient } = constants;\r\n\r\n\r\nexport interface KnexConnection extends knex {\r\n\t/**\r\n\t * Connection name.\r\n\t */\r\n\t// customName: string;\r\n}\r\n\r\n/**\r\n * Invoked when a request for getting query is replied.\r\n * @param {QueryBuilder} queryBuilder A query that is bound to a connection.\r\n * @param {Class extends Model} boundEntityClass A class that is bound to a connection.\r\n */\r\nexport type QueryCallback<TEntity> = (queryBuilder: QueryBuilder<TEntity>, boundEntityClass?) => Promise<any>;\r\n\r\n/**\r\n * Helps with managing multiple database connections and executing same query with all\r\n * of those connections.\r\n */\r\nexport interface IDatabaseConnector {\r\n\t/**\r\n\t * Gets the established database connection.\r\n\t */\r\n\tconnection: KnexConnection;\r\n\r\n\t/**\r\n\t * Creates a new database connection.\r\n\t * @param {IConnectionDetail} detail Credentials to make connection.\r\n\t */\r\n\tinit(detail: IDbConnectionDetail): void;\r\n\r\n\t/**\r\n\t * Closes all connections and destroys this connector.\r\n\t */\r\n\tdispose(): Promise<void>;\r\n\t\r\n\t/**\r\n\t * Executes same query on all managed connections. This connector binds connections \r\n\t * to `EntityClass` and passes a queryable instance to `callback`.\r\n\t * \r\n\t * @param {class} EntityClass An entity class to bind a connection.\r\n\t * @param {QueryCallback} callback A callback to invoke each time a connection is bound.\r\n\t * @param {AtomicSession} atomicSession A session which provides transaction to execute queries on.\r\n\t * @example\r\n\t * \tconnector.init({...});\r\n\t * \tconst result = await connector.prepare(AccountEntity, (query) => {\r\n\t * \t\treturn query.insert({ name: 'Example' })\r\n\t * \t});\r\n\t * \r\n\t * @return {Promise} A promise returned by the `callback`.\r\n\t */\r\n\tprepare<TEntity extends EntityBase>(EntityClass, callback: QueryCallback<TEntity>, atomicSession?: AtomicSession): Promise<any>;\r\n}\r\n"]}