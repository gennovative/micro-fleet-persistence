{"version":3,"sources":["app/KnexDatabaseConnector.ts"],"names":[],"mappings":"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","file":"KnexDatabaseConnector.js","sourcesContent":["import * as knex from 'knex';\r\nimport { Model, QueryBuilder } from 'objection';\r\n\r\nimport { injectable, Guard } from 'back-lib-common-util';\r\n\r\nimport { EntityBase } from './EntityBase';\r\nimport { IDatabaseConnector, IConnectionDetail, QueryCallback } from './IDatabaseConnector';\r\n\r\n/**\r\n * Provides settings from package\r\n */\r\n@injectable()\r\nexport class KnexDatabaseConnector implements IDatabaseConnector {\r\n\t\r\n\tprivate _connections: any[];\r\n\tprivate _knex; // for unittest mocking\r\n\r\n\tconstructor() {\r\n\t\tthis._connections = [];\r\n\t\tthis._knex = knex;\r\n\t}\r\n\r\n\tpublic addConnection(detail: IConnectionDetail, name?: string): void {\r\n\t\tGuard.assertDefined('detail', detail);\r\n\r\n\t\tlet settings = {\r\n\t\t\t\tclient: detail.clientName,\r\n\t\t\t\tuseNullAsDefault: true,\r\n\t\t\t\tconnection: this.buildConnSettings(detail)\r\n\t\t\t},\r\n\t\t\tknexConn = this._knex(settings);\r\n\t\t\tknexConn['customName'] = name ? name : (this._connections.length + '');\r\n\t\tthis._connections.push(knexConn);\r\n\t}\r\n\r\n\tpublic dispose(): Promise<void> {\r\n\t\tlet destroyPromises = this._connections.map(conn => {\r\n\t\t\treturn conn['destroy']();\r\n\t\t});\r\n\t\tthis._knex = null;\r\n\t\tthis._connections = null;\r\n\t\treturn <any>destroyPromises;\r\n\t}\r\n\r\n\tpublic query<TEntity extends EntityBase>(EntityClass, callback: QueryCallback<TEntity>, ...names: string[]): Promise<any>[] {\r\n\t\treturn this._connections.map(conn => {\r\n\t\t\tlet BoundClass;\r\n\r\n\t\t\t// If connection names is specified, we only execute queries on those connections.\r\n\t\t\tif (names && names.length) {\r\n\t\t\t\tif (names.findIndex(name => name == conn['customName']) >= 0) {\r\n\t\t\t\t\tBoundClass = EntityClass['bindKnex'](conn);\r\n\t\t\t\t\treturn callback(BoundClass['query'](), BoundClass);\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tBoundClass = EntityClass['bindKnex'](conn);\r\n\t\t\treturn callback(BoundClass['query'](), BoundClass);\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tprivate buildConnSettings(detail: IConnectionDetail): any {\r\n\t\t// 1st priority: connect to a local file.\r\n\t\tif (detail.fileName) {\r\n\t\t\treturn { filename: detail.fileName };\r\n\t\t}\r\n\r\n\t\t// 2nd priority: connect with a connection string.\r\n\t\tif (detail.connectionString) {\r\n\t\t\treturn detail.connectionString;\r\n\t\t}\r\n\r\n\t\t// Last priority: connect with host credentials.\r\n\t\tif (detail.host) {\r\n\t\t\treturn {\r\n\t\t\t\thost: detail.host.address,\r\n\t\t\t\tuser: detail.host.user,\r\n\t\t\t\tpassword: detail.host.password,\r\n\t\t\t\tdatabase: detail.host.database,\r\n\t\t\t};\r\n\t\t}\r\n\t\tthrow 'No database settings!';\r\n\t}\r\n}"]}