{"version":3,"sources":["app/DatabaseAddOn.ts"],"names":[],"mappings":"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","file":"DatabaseAddOn.js","sourcesContent":["import { DbSettingKeys as S } from 'back-lib-common-constants';\r\nimport { IConfigurationProvider, IDbConnectionDetail, Types as ConT } from 'back-lib-common-contracts';\r\nimport { injectable, inject, Guard, CriticalException } from 'back-lib-common-util';\r\n\r\nimport { IDatabaseConnector } from './connector/IDatabaseConnector';\r\nimport { Types as T } from './Types';\r\n\r\n\r\n/**\r\n * Initializes database connections.\r\n */\r\n@injectable()\r\nexport class DatabaseAddOn implements IServiceAddOn {\r\n\t\r\n\tconstructor(\r\n\t\t@inject(ConT.CONFIG_PROVIDER) private _configProvider: IConfigurationProvider,\r\n\t\t@inject(T.DB_CONNECTOR) private _dbConnector: IDatabaseConnector\r\n\t) {\r\n\t\tGuard.assertArgDefined('_configProvider', _configProvider);\r\n\t\tGuard.assertArgDefined('_dbConnector', _dbConnector);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.init\r\n\t */\r\n\tpublic init(): Promise<void> {\r\n\t\tthis.addConnections();\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.deadLetter\r\n\t */\r\n\tpublic deadLetter(): Promise<void> {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.dispose\r\n\t */\r\n\tpublic async dispose(): Promise<void> {\r\n\t\tawait this._dbConnector.dispose();\r\n\t\tthis._dbConnector = null;\r\n\t\tthis._configProvider = null;\r\n\t}\r\n\r\n\r\n\tprivate addConnections(): void {\r\n\t\tlet nConn = <number>this._configProvider.get(S.DB_NUM_CONN),\r\n\t\t\tconnDetail;\r\n\r\n\t\tfor (let i = 0; i < nConn; ++i) {\r\n\t\t\tconnDetail = this.buildConnDetails(i);\r\n\t\t\tif (!connDetail) { continue; }\r\n\t\t\tthis._dbConnector.addConnection(connDetail);\r\n\t\t}\r\n\r\n\t\tif (!this._dbConnector.connections.length) {\r\n\t\tthrow new CriticalException('No database settings!');\r\n\t\t}\r\n\t}\r\n\r\n\tprivate buildConnDetails(connIdx: number): IDbConnectionDetail {\r\n\t\tlet provider = this._configProvider,\r\n\t\t\tcnnDetail: IDbConnectionDetail = {\r\n\t\t\t\tclientName: provider.get(S.DB_ENGINE + connIdx) // Must belong to `DbClient`\r\n\t\t\t},\r\n\t\t\tvalue: string;\r\n\r\n\t\t// 1st priority: connect to a local file.\r\n\t\tvalue = provider.get(S.DB_FILE + connIdx);\r\n\t\tif (value) {\r\n\t\t\tcnnDetail.filePath = value;\r\n\t\t\treturn cnnDetail;\r\n\t\t}\r\n\r\n\t\t// 2nd priority: connect with a connection string.\r\n\t\tvalue = provider.get(S.DB_CONN_STRING + connIdx);\r\n\t\tif (value) {\r\n\t\t\tcnnDetail.connectionString = value;\r\n\t\t\treturn cnnDetail;\r\n\t\t}\r\n\r\n\t\t// Last priority: connect with host credentials.\r\n\t\tvalue = provider.get(S.DB_HOST + connIdx);\r\n\t\tif (value) {\r\n\t\t\tcnnDetail.host = {\r\n\t\t\t\taddress: provider.get(S.DB_HOST + connIdx),\r\n\t\t\t\tuser: provider.get(S.DB_USER + connIdx),\r\n\t\t\t\tpassword: provider.get(S.DB_PASSWORD + connIdx),\r\n\t\t\t\tdatabase: provider.get(S.DB_NAME + connIdx),\r\n\t\t\t};\r\n\t\t\treturn cnnDetail;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}"]}